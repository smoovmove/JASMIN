{
  "writeup_id": "Htb_Sherlock_Subatomic",
  "scenario_fingerprint": {
    "scenario_name": "electron_malware_discord_hijack",
    "primary_services": [
      "http",
      "https",
      "discord_api"
    ],
    "port_signature": "80+443",
    "service_combination": "web+c2_communication",
    "os_family": "windows",
    "environment_type": "desktop_workstation",
    "entry_vector": "social_engineering_fake_installer",
    "privilege_path": "user_execution_to_persistence",
    "attack_complexity": "medium",
    "estimated_time": "30-45 minutes",
    "scenario_confidence": 0.9,
    "distinguishing_factors": [
      "electron_application_malware",
      "discord_token_theft",
      "fake_game_installer",
      "browser_data_exfiltration",
      "vm_detection_evasion"
    ],
    "environmental_clues": [
      "nullsoft_installer_wrapper",
      "invalid_digital_signature",
      "nodejs_electron_framework",
      "discord_module_modification",
      "browser_cookie_harvesting"
    ],
    "similar_scenarios": [
      "stealer_malware_analysis",
      "electron_app_hijacking"
    ],
    "unique_aspects": [
      "discord_account_hijacking",
      "gaming_social_engineering_lure",
      "electron_framework_abuse",
      "multi_browser_targeting"
    ]
  },
  "success_patterns": {
    "success_factors": [
      {
        "technique": "Social Engineering via Discord",
        "success_reason": "Gaming-themed lure targeting Discord users with fake game installer",
        "prerequisite_indicators": [
          "discord_account_access",
          "gaming_community_presence",
          "trusted_relationship_with_sender"
        ],
        "recognition_patterns": [
          "gaming-related download links",
          "messages from compromised accounts",
          "executable disguised as game installer"
        ],
        "failure_modes": [
          "user_suspicious_of_unsolicited_links",
          "antivirus_detection",
          "signature_verification_enabled"
        ],
        "environmental_factors": [
          "gaming_community_trust",
          "discord_platform_familiarity",
          "executable_download_acceptance"
        ],
        "success_probability": 0.73,
        "typical_timeframe": "immediate upon execution"
      },
      {
        "technique": "Invalid Digital Signature Bypass",
        "success_reason": "Microsoft signature present but invalid, may fool casual inspection",
        "prerequisite_indicators": [
          "signature_present_in_binary",
          "microsoft_corporation_signer",
          "user_not_checking_validity"
        ],
        "recognition_patterns": [
          "HashMismatch status in signature",
          "expired certificate dates",
          "authenticode signature present"
        ],
        "failure_modes": [
          "signature_validation_enforced",
          "user_checks_certificate_validity",
          "security_software_blocks_invalid_sigs"
        ],
        "environmental_factors": [
          "windows_default_signature_handling",
          "user_trust_in_microsoft_signatures",
          "insufficient_signature_verification"
        ],
        "success_probability": 0.65,
        "typical_timeframe": "during initial execution"
      },
      {
        "technique": "Electron App Packaging",
        "success_reason": "Legitimate application framework used to package malware",
        "prerequisite_indicators": [
          "electron_framework_available",
          "nodejs_runtime_present",
          "asar_packaging_capability"
        ],
        "recognition_patterns": [
          "nsis installer containing electron app",
          "package.json with electron dependencies",
          "asar archive structure"
        ],
        "failure_modes": [
          "electron_security_policies_enforced",
          "code_signing_required",
          "application_sandboxing"
        ],
        "environmental_factors": [
          "electron_apps_commonly_accepted",
          "nodejs_ecosystem_familiarity",
          "cross_platform_compatibility"
        ],
        "success_probability": 0.82,
        "typical_timeframe": "during installation phase"
      }
    ],
    "critical_discoveries": [
      {
        "discovery": "SerenityTherapyInstaller binary metadata",
        "discovery_method": "PE file properties analysis",
        "why_critical": "Reveals social engineering theme and fake legitimacy",
        "how_to_recognize": [
          "misleading application names",
          "copyright information mismatch",
          "therapy/wellness themed naming"
        ],
        "follow_up_actions": [
          "extract_nsis_installer_contents",
          "analyze_embedded_electron_app",
          "check_c2_communications"
        ]
      },
      {
        "discovery": "Invalid Microsoft signature",
        "discovery_method": "Authenticode signature verification",
        "why_critical": "Indicates signature abuse for social engineering",
        "how_to_recognize": [
          "HashMismatch status in Get-AuthenticodeSignature",
          "expired certificate dates",
          "microsoft corporation signer on suspicious binary"
        ],
        "follow_up_actions": [
          "verify_certificate_chain",
          "check_signature_timestamp",
          "analyze_spcspopusinfo_structure"
        ]
      },
      {
        "discovery": "Discord account compromise mechanism",
        "discovery_method": "Malware behavior analysis",
        "why_critical": "Explains persistent message sending and account control loss",
        "how_to_recognize": [
          "discord_module_modification",
          "token_exfiltration_capability",
          "persistent_c2_communication"
        ],
        "follow_up_actions": [
          "identify_modified_discord_files",
          "trace_c2_communication_patterns",
          "analyze_token_harvesting_methods"
        ]
      }
    ],
    "escalation_keys": [
      {
        "privilege_level": "user_execution",
        "escalation_method": "Discord_Module_Injection",
        "why_possible": "Electron app can modify Discord installation files",
        "recognition_signs": [
          "discord_installation_path_enumeration",
          "module_file_modification",
          "persistent_c2_communication"
        ],
        "exploitation_path": "Initial execution → Discord path discovery → Module injection → Token harvesting → Account control"
      },
      {
        "privilege_level": "browser_access",
        "escalation_method": "Cookie_and_Token_Harvesting",
        "why_possible": "Malware targets browser data and Discord tokens",
        "recognition_signs": [
          "firefox_cookie_enumeration_commands",
          "browser_data_collection",
          "credential_harvesting_capability"
        ],
        "exploitation_path": "System access → Browser enumeration → Cookie extraction → Credential harvesting → Account takeover"
      }
    ]
  },
  "decision_tree": {
    "decision_points": [
      {
        "step": 1,
        "situation": "Received suspicious executable file for malware analysis",
        "decision": "Start with static analysis of file metadata and signatures",
        "reasoning": "File metadata reveals social engineering tactics and potential attribution before dynamic analysis",
        "confidence": 0.95,
        "alternatives": [
          {
            "option": "dynamic_analysis",
            "when": "if static analysis inconclusive"
          },
          {
            "option": "sandbox_execution",
            "when": "if safe environment available"
          }
        ],
        "success_indicators": [
          "file_type_identified",
          "signature_status_determined",
          "hash_values_extracted"
        ],
        "next_decision": "analyze_signature_validity"
      },
      {
        "step": 2,
        "situation": "Found invalid digital signature with Microsoft certificate",
        "decision": "Investigate SpcSpOpusInfo structure for program name mismatch",
        "reasoning": "Invalid signatures often indicate stolen certificates or signature transplanting",
        "confidence": 0.9,
        "prerequisites": [
          "signature_present",
          "hash_mismatch_detected"
        ],
        "success_indicators": [
          "program_name_extracted",
          "certificate_details_analyzed"
        ],
        "failure_fallbacks": [
          "manual_hex_analysis",
          "alternative_signature_tools"
        ]
      },
      {
        "step": 3,
        "situation": "Confirmed NSIS installer with suspicious signature",
        "decision": "Extract installer contents using 7zip for deeper analysis",
        "reasoning": "NSIS installers are self-extracting archives that can be analyzed statically",
        "confidence": 0.85,
        "prerequisites": [
          "nsis_installer_identified"
        ],
        "success_indicators": [
          "archive_contents_extracted",
          "embedded_files_discovered"
        ],
        "failure_fallbacks": [
          "nsis_decompiler",
          "dynamic_execution_monitoring"
        ]
      }
    ],
    "branching_logic": {
      "if_signature_invalid": {
        "action": "deep_dive_signature_analysis",
        "tools": [
          "signify",
          "authenticode_parser",
          "virustotal"
        ],
        "next_phase": "static_content_extraction"
      },
      "if_nsis_detected": {
        "action": "extract_installer_contents",
        "alternatives": [
          "7zip_extraction",
          "nsis_decompiler",
          "manual_unpacking"
        ],
        "decision_criteria": "based_on_extraction_success_rate"
      },
      "if_electron_app_found": {
        "action": "asar_extraction_and_code_analysis",
        "purpose": "analyze_javascript_payload",
        "tools": [
          "asar",
          "nodejs",
          "vscode"
        ]
      }
    },
    "optimization_rules": [
      {
        "rule": "always_check_signature_validity_first",
        "reasoning": "invalid_signatures_strong_malware_indicator",
        "applicability": "signed_executables"
      },
      {
        "rule": "extract_installers_before_execution",
        "reasoning": "safer_analysis_and_reveals_embedded_components",
        "applicability": "nsis_innosetup_installshield_installers"
      },
      {
        "rule": "use_virustotal_for_quick_metadata_analysis",
        "reasoning": "comprehensive_signature_and_hash_analysis",
        "applicability": "initial_file_triage"
      }
    ]
  },
  "applicability_rules": {
    "technique_rules": [
      {
        "technique": "Electron_Malware_Analysis",
        "mitre_id": "T1204.002",
        "required_services": [
          "file_system"
        ],
        "required_ports": [],
        "os_requirements": [
          "windows",
          "linux",
          "macos"
        ],
        "environmental_prerequisites": [
          "electron_application_present",
          "nodejs_runtime_available",
          "asar_archive_extractable"
        ],
        "success_indicators": [
          "package_json_found",
          "main_js_accessible",
          "resources_directory_present"
        ],
        "incompatible_with": [
          "encrypted_asar_archive",
          "obfuscated_javascript",
          "runtime_packing"
        ],
        "confidence_boosters": [
          "standard_electron_structure",
          "readable_javascript_code",
          "clear_c2_communications"
        ],
        "typical_success_rate": 0.92,
        "estimated_time": "30-60 minutes"
      },
      {
        "technique": "Discord_Token_Theft",
        "mitre_id": "T1555.003",
        "required_services": [
          "discord"
        ],
        "required_ports": [
          443
        ],
        "os_requirements": [
          "windows",
          "linux",
          "macos"
        ],
        "environmental_prerequisites": [
          "discord_installation_present",
          "local_storage_accessible",
          "user_logged_into_discord"
        ],
        "success_indicators": [
          "discord_tokens_found",
          "leveldb_accessible",
          "user_data_readable"
        ],
        "incompatible_with": [
          "discord_not_installed",
          "encrypted_local_storage",
          "user_not_authenticated"
        ],
        "confidence_boosters": [
          "standard_discord_paths",
          "token_format_validation",
          "api_connectivity_confirmed"
        ],
        "typical_success_rate": 0.85,
        "estimated_time": "10-20 minutes"
      },
      {
        "technique": "Browser_Data_Exfiltration",
        "mitre_id": "T1555.003",
        "required_services": [
          "browser"
        ],
        "required_ports": [
          443
        ],
        "os_requirements": [
          "windows",
          "linux",
          "macos"
        ],
        "environmental_prerequisites": [
          "browser_installation_present",
          "user_profile_accessible",
          "cookies_database_readable"
        ],
        "success_indicators": [
          "cookie_files_found",
          "login_data_accessible",
          "browser_history_readable"
        ],
        "incompatible_with": [
          "encrypted_browser_profiles",
          "master_password_protected",
          "sandboxed_browser_data"
        ],
        "confidence_boosters": [
          "multiple_browser_support",
          "standard_profile_paths",
          "sqlite_database_format"
        ],
        "typical_success_rate": 0.78,
        "estimated_time": "15-30 minutes"
      }
    ],
    "environmental_detectors": {
      "electron_application": {
        "port_indicators": [],
        "service_indicators": [
          "electron",
          "nodejs"
        ],
        "banner_indicators": [
          "Electron",
          "Node.js",
          "asar"
        ],
        "confidence_threshold": 0.9
      },
      "discord_installation": {
        "port_indicators": [
          443
        ],
        "service_indicators": [
          "discord"
        ],
        "technology_indicators": [
          "discord",
          "leveldb"
        ],
        "confidence_threshold": 0.85
      },
      "browser_installation": {
        "port_indicators": [
          80,
          443
        ],
        "service_indicators": [
          "chrome",
          "firefox",
          "edge"
        ],
        "technology_indicators": [
          "chromium",
          "gecko",
          "webkit"
        ],
        "confidence_threshold": 0.8
      }
    },
    "attack_prioritization": {
      "high_priority": [
        {
          "attack": "discord_token_theft",
          "when": "discord_installation_detected",
          "reason": "immediate_account_compromise_possible"
        },
        {
          "attack": "browser_credential_extraction",
          "when": "browser_installation_detected",
          "reason": "high_value_credential_access"
        }
      ],
      "medium_priority": [
        {
          "attack": "electron_app_analysis",
          "when": "electron_application_detected",
          "reason": "potential_backdoor_or_persistence"
        }
      ]
    }
  },
  "technique_intelligence": {
    "techniques": [
      {
        "name": "Malware Signature Analysis",
        "mitre_id": "T1036.001",
        "category": "defense_evasion",
        "phase": "execution",
        "tools_used": [
          {
            "name": "Get-AuthenticodeSignature",
            "command_template": "Get-AuthenticodeSignature {file_path} | fl",
            "actual_command": "Get-AuthenticodeSignature .\\nsis-installer.exe | fl",
            "output_pattern": "Status.*HashMismatch",
            "effectiveness_rating": 5,
            "reliability": 0.98
          },
          {
            "name": "Signify",
            "command_template": "python -c \"from signify.authenticode import SignedPEFile; pefile = SignedPEFile(open('{file}', 'rb')); print(pefile.signed_datas[0].signer_info.program_name)\"",
            "actual_command": "python signify analysis for SpcSpOpusInfo extraction",
            "success_factors": [
              "valid_pe_file",
              "signature_present"
            ],
            "effectiveness_rating": 4
          }
        ],
        "prerequisites": [
          "windows_pe_executable",
          "digital_signature_present",
          "python_signify_module"
        ],
        "success_indicators": [
          "signature_status_identified",
          "program_name_extracted",
          "certificate_details_revealed"
        ],
        "common_failures": [
          "no_signature_present",
          "corrupted_pe_structure",
          "python_module_dependencies"
        ],
        "follow_up_techniques": [
          "hash_analysis",
          "virustotal_lookup",
          "static_code_analysis"
        ],
        "time_investment": "5-15 minutes",
        "skill_level": "intermediate"
      },
      {
        "name": "Cryptographic Hash Analysis",
        "mitre_id": "T1027",
        "category": "defense_evasion",
        "phase": "reconnaissance",
        "tools_used": [
          {
            "name": "Get-FileHash",
            "command_template": "Get-FileHash -Algorithm {algorithm} {file_path}",
            "actual_command": "Get-FileHash -Algorithm SHA256 .\\nsis-installer.exe",
            "output_pattern": "Algorithm.*Hash.*Path",
            "effectiveness_rating": 5,
            "reliability": 1.0
          },
          {
            "name": "Linux hash utilities",
            "command_template": "{algorithm}sum {file_path}",
            "actual_command": "sha256sum nsis-installer.exe",
            "success_factors": [
              "file_accessible",
              "hash_utility_available"
            ],
            "effectiveness_rating": 5
          }
        ],
        "prerequisites": [
          "target_file_accessible",
          "hash_utilities_available"
        ],
        "success_indicators": [
          "hash_values_generated",
          "consistent_results_across_tools",
          "searchable_hash_fingerprints"
        ],
        "common_failures": [
          "file_access_denied",
          "corrupted_file_data",
          "tool_not_available"
        ],
        "follow_up_techniques": [
          "virustotal_hash_lookup",
          "threat_intelligence_correlation",
          "malware_family_identification"
        ],
        "time_investment": "2-5 minutes",
        "skill_level": "beginner"
      },
      {
        "name": "NSIS Installer Analysis",
        "mitre_id": "T1027.002",
        "category": "defense_evasion",
        "phase": "execution",
        "tools_used": [
          {
            "name": "7zip",
            "command_template": "7z x {installer_file}",
            "actual_command": "7z x nsis-installer.exe",
            "output_pattern": "Extracting.*files",
            "effectiveness_rating": 5,
            "reliability": 0.95
          },
          {
            "name": "file",
            "command_template": "file {filename}",
            "actual_command": "file nsis-installer.exe",
            "success_factors": [
              "valid_pe_structure",
              "nsis_signature_present"
            ],
            "effectiveness_rating": 4
          }
        ],
        "prerequisites": [
          "nsis_installer_file",
          "extraction_tools_available",
          "sufficient_disk_space"
        ],
        "success_indicators": [
          "installer_type_identified",
          "embedded_files_extracted",
          "installation_script_accessible"
        ],
        "common_failures": [
          "password_protected_archive",
          "corrupted_installer",
          "insufficient_permissions"
        ],
        "follow_up_techniques": [
          "electron_app_analysis",
          "javascript_code_review",
          "c2_infrastructure_identification"
        ],
        "time_investment": "10-20 minutes",
        "skill_level": "intermediate"
      },
      {
        "name": "Electron Malware Analysis",
        "mitre_id": "T1059.007",
        "category": "execution",
        "phase": "execution",
        "tools_used": [
          {
            "name": "asar",
            "command_template": "asar extract {asar_file} {output_directory}",
            "actual_command": "asar extract app.asar extracted_app/",
            "output_pattern": "Extracted.*files",
            "effectiveness_rating": 5,
            "reliability": 0.98
          },
          {
            "name": "npm",
            "command_template": "npm install {package_name}",
            "actual_command": "npm install asar",
            "success_factors": [
              "nodejs_environment",
              "internet_connectivity"
            ],
            "effectiveness_rating": 4
          }
        ],
        "prerequisites": [
          "electron_application_identified",
          "nodejs_environment_available",
          "asar_extraction_tools"
        ],
        "success_indicators": [
          "javascript_source_code_extracted",
          "package_json_metadata_accessible",
          "application_structure_revealed"
        ],
        "common_failures": [
          "encrypted_asar_archive",
          "missing_nodejs_dependencies",
          "obfuscated_javascript_code"
        ],
        "follow_up_techniques": [
          "javascript_deobfuscation",
          "c2_communication_analysis",
          "credential_theft_mechanism_identification"
        ],
        "time_investment": "15-45 minutes",
        "skill_level": "intermediate"
      }
    ],
    "tool_effectiveness": [
      {
        "tool": "Get-AuthenticodeSignature",
        "use_case": "digital_signature_validation",
        "effectiveness_rating": 5,
        "reliability": 0.98,
        "learning_curve": "low",
        "essential_for": [
          "windows_malware_analysis"
        ],
        "alternatives": [
          "signtool",
          "signify_python"
        ],
        "best_practices": [
          "check_signature_status_first",
          "verify_certificate_chain",
          "compare_signer_with_file_metadata"
        ]
      },
      {
        "tool": "7zip",
        "use_case": "installer_archive_extraction",
        "effectiveness_rating": 5,
        "reliability": 0.95,
        "learning_curve": "low",
        "essential_for": [
          "packed_malware_analysis"
        ],
        "alternatives": [
          "winrar",
          "native_extraction_tools"
        ],
        "best_practices": [
          "extract_to_isolated_directory",
          "scan_extracted_files_immediately",
          "preserve_original_archive"
        ]
      },
      {
        "tool": "asar",
        "use_case": "electron_app_extraction",
        "effectiveness_rating": 5,
        "reliability": 0.98,
        "learning_curve": "low",
        "essential_for": [
          "electron_malware_analysis"
        ],
        "alternatives": [
          "manual_asar_parsing"
        ],
        "best_practices": [
          "install_via_npm_globally",
          "extract_to_organized_directory_structure",
          "analyze_package_json_first"
        ]
      }
    ],
    "command_sequences": [
      {
        "sequence_name": "nsis_malware_initial_analysis",
        "steps": [
          {
            "step": 1,
            "command": "file nsis-installer.exe",
            "purpose": "Identify file type and structure",
            "expected_output": "PE32 executable...Nullsoft Installer"
          },
          {
            "step": 2,
            "command": "Get-AuthenticodeSignature .\\nsis-installer.exe | fl",
            "purpose": "Check digital signature validity",
            "expected_output": "Status: HashMismatch"
          },
          {
            "step": 3,
            "command": "Get-FileHash -Algorithm SHA256 .\\nsis-installer.exe",
            "purpose": "Generate file hash for threat intelligence",
            "expected_output": "SHA256 hash value"
          },
          {
            "step": 4,
            "command": "7z x nsis-installer.exe",
            "purpose": "Extract installer contents",
            "expected_output": "Extracted files and directories"
          }
        ],
        "success_rate": 0.92,
        "typical_duration": "10-15 minutes"
      },
      {
        "sequence_name": "electron_malware_deep_analysis",
        "steps": [
          {
            "step": 1,
            "command": "npm install -g asar",
            "purpose": "Install electron extraction tool",
            "expected_output": "asar package installed globally"
          },
          {
            "step": 2,
            "command": "asar extract app.asar extracted_app/",
            "purpose": "Extract electron application source",
            "expected_output": "JavaScript source files extracted"
          },
          {
            "step": 3,
            "command": "cat extracted_app/package.json",
            "purpose": "Analyze application metadata",
            "expected_output": "Package configuration and dependencies"
          },
          {
            "step": 4,
            "command": "grep -r 'http' extracted_app/",
            "purpose": "Identify C2 communication endpoints",
            "expected_output": "URLs and network communication code"
          }
        ],
        "success_rate": 0.88,
        "typical_duration": "20-30 minutes"
      }
    ]
  },
  "metadata": {
    "basic_metadata": {
      "name": "Subatomic",
      "difficulty": "Medium",
      "os": "Windows",
      "platform": "HackTheBox Sherlock",
      "release_date": "2024-04-11",
      "author": "CyberRaiju",
      "estimated_time": "90-120 minutes"
    },
    "intelligence_metadata": {
      "attack_complexity": "medium",
      "skill_level_required": "intermediate",
      "primary_attack_vectors": [
        "malware_analysis",
        "electron_app",
        "social_engineering"
      ],
      "key_vulnerabilities": [
        "discord_hijacking",
        "data_exfiltration",
        "browser_data_theft"
      ],
      "environment_type": "malware_analysis_lab",
      "real_world_relevance": "very_high",
      "learning_value": [
        "electron_malware_analysis",
        "c2_communication",
        "digital_forensics"
      ],
      "prerequisite_knowledge": [
        "malware_analysis_basics",
        "javascript",
        "electron_framework",
        "reverse_engineering"
      ]
    },
    "categorization": {
      "primary_category": "malware_analysis",
      "subcategories": [
        "digital_forensics",
        "reverse_engineering",
        "c2_analysis"
      ],
      "attack_types": [
        "credential_access",
        "data_exfiltration",
        "persistence"
      ],
      "defensive_lessons": [
        "social_engineering_awareness",
        "application_whitelisting",
        "network_monitoring"
      ]
    },
    "similarity_markers": {
      "similar_boxes": [
        "Noted",
        "Reminiscent",
        "OpTinselTrace"
      ],
      "similarity_reasons": [
        "malware_analysis_focus",
        "c2_communication",
        "data_exfiltration"
      ],
      "unique_aspects": [
        "electron_based_malware",
        "discord_hijacking",
        "fake_game_installer"
      ],
      "difficulty_factors": [
        "real_malware_sample",
        "multi_stage_analysis",
        "c2_infrastructure_analysis"
      ]
    }
  },
  "extraction_metadata": {
    "parse_date": "2025-07-04T17:51:06.952267",
    "original_file": "0xdf_writeups/Htb Sherlock Subatomic.md",
    "content_length": 48674,
    "extraction_version": "2.0-claude",
    "model_used": "claude-sonnet-4-20250514"
  },
  "intelligence_confidence": 1.0,
  "quality_breakdown": {
    "scenario_uniqueness": 1.0,
    "success_logic_clarity": 1.0,
    "applicability_completeness": 1.0,
    "decision_tree_depth": 1.0,
    "technique_actionability": 1.0
  }
}