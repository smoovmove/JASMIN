{
  "writeup_id": "Htb_Fortune",
  "scenario_fingerprint": {
    "scenario_name": "openbsd_command_injection_authpf_nfs",
    "primary_services": [
      "http",
      "https",
      "ssh",
      "nfs"
    ],
    "port_signature": "22+80+443+2049",
    "service_combination": "ssh+http+https+nfs",
    "os_family": "openbsd",
    "environment_type": "unix_server",
    "entry_vector": "command_injection",
    "privilege_path": "command_injection_to_nfs_uid_spoofing_to_root",
    "attack_complexity": "insane",
    "estimated_time": "4-6 hours",
    "scenario_confidence": 0.92,
    "distinguishing_factors": [
      "fortune_unix_program_vulnerability",
      "client_certificate_authentication",
      "authpf_firewall_gateway",
      "nfs_uid_spoofing",
      "openbsd_httpd"
    ],
    "environmental_clues": [
      "openbsd_httpd_header",
      "fortune_database_selection",
      "client_cert_required_https",
      "intermediate_ca_certificate",
      "restricted_shell_access"
    ],
    "similar_scenarios": [
      "lacasadepapel_htb_insane"
    ],
    "unique_aspects": [
      "authpf_port_knocking",
      "nfs_home_directory_access",
      "pgadmin_credential_extraction",
      "firewall_rule_manipulation"
    ]
  },
  "success_patterns": {
    "success_factors": [
      {
        "technique": "Command Injection",
        "success_reason": "Web application directly concatenated user input into shell command without sanitization",
        "prerequisite_indicators": [
          "web_application_accepts_user_input",
          "backend_executes_system_commands",
          "no_input_validation_present"
        ],
        "recognition_patterns": [
          "parameter controls command arguments",
          "can modify command behavior with multiple values",
          "shell metacharacters not filtered",
          "os.popen() or similar functions in source code"
        ],
        "failure_modes": [
          "input_sanitization_present",
          "command_parameterization_used",
          "restricted_shell_environment"
        ],
        "environmental_factors": [
          "flask_application_with_os_popen",
          "fortune_command_accepts_multiple_arguments",
          "developer_trusted_user_input"
        ],
        "success_probability": 0.95,
        "typical_timeframe": "10-30 minutes"
      },
      {
        "technique": "Client Certificate Authentication Bypass",
        "success_reason": "Found client certificate and private key through command injection enumeration",
        "prerequisite_indicators": [
          "https_service_requires_client_cert",
          "certificate_files_accessible_on_filesystem",
          "command_injection_or_file_read_available"
        ],
        "recognition_patterns": [
          "SSL handshake requires client authentication",
          "certificate files in predictable locations",
          "intermediate CA mentioned in SSL info",
          "fortune.htb domain name in certificate"
        ],
        "failure_modes": [
          "certificates_not_accessible",
          "certificates_encrypted_with_passphrase",
          "certificate_revocation_active"
        ],
        "environmental_factors": [
          "certificates_stored_in_web_directory",
          "insufficient_file_permissions_separation",
          "development_certificates_in_production"
        ],
        "success_probability": 0.75,
        "typical_timeframe": "15-45 minutes"
      },
      {
        "technique": "AuthPF Firewall Manipulation",
        "success_reason": "SSH key provided access to authpf which opened firewall ports for NFS access",
        "prerequisite_indicators": [
          "openbsd_system_detected",
          "authpf_service_configured",
          "ssh_key_available_for_authpf_user"
        ],
        "recognition_patterns": [
          "ssh connection doesn't provide shell",
          "firewall rules change after ssh connection",
          "new ports become accessible",
          "authpf mentioned in ssh banner or logs"
        ],
        "failure_modes": [
          "authpf_not_configured",
          "ssh_key_authentication_fails",
          "firewall_rules_too_restrictive"
        ],
        "environmental_factors": [
          "openbsd_pf_firewall_active",
          "authpf_used_for_port_knocking",
          "network_segmentation_via_firewall"
        ],
        "success_probability": 0.6,
        "typical_timeframe": "30-60 minutes"
      },
      {
        "technique": "NFS UID Spoofing",
        "success_reason": "NFS service trusted client-side UID without proper authentication",
        "prerequisite_indicators": [
          "nfs_service_accessible",
          "home_directories_exported",
          "no_root_squashing_or_uid_mapping"
        ],
        "recognition_patterns": [
          "showmount reveals exported filesystems",
          "can mount nfs shares",
          "file permissions based on numeric UIDs",
          "ssh keys accessible in mounted home directories"
        ],
        "failure_modes": [
          "root_squashing_enabled",
          "all_squash_configured",
          "kerberos_authentication_required"
        ],
        "environmental_factors": [
          "nfs_version_3_or_earlier",
          "trusted_network_assumption",
          "insufficient_nfs_security_configuration"
        ],
        "success_probability": 0.8,
        "typical_timeframe": "20-40 minutes"
      }
    ],
    "critical_discoveries": [
      {
        "discovery": "Client certificate and private key files",
        "discovery_method": "Command injection filesystem enumeration",
        "why_critical": "Enabled access to HTTPS service requiring client authentication",
        "how_to_recognize": [
          "certificate files in web directories",
          "intermediate CA name matches SSL service",
          "domain name matches target system"
        ],
        "follow_up_actions": [
          "extract_certificate_and_key",
          "configure_browser_client_cert",
          "access_authenticated_https_service"
        ]
      },
      {
        "discovery": "SSH private key for authpf user",
        "discovery_method": "HTTPS service provided SSH key after authentication",
        "why_critical": "Enabled firewall manipulation to access NFS service",
        "how_to_recognize": [
          "ssh key provided by authenticated service",
          "connection doesn't provide interactive shell",
          "network topology changes after connection"
        ],
        "follow_up_actions": [
          "establish_ssh_connection",
          "scan_for_newly_accessible_ports",
          "identify_nfs_services"
        ]
      },
      {
        "discovery": "NFS export of home directories",
        "discovery_method": "Port scan after authpf connection revealed NFS",
        "why_critical": "Allowed UID spoofing to access user SSH keys",
        "how_to_recognize": [
          "showmount reveals home directory exports",
          "numeric UIDs control file access",
          "ssh keys present in user directories"
        ],
        "follow_up_actions": [
          "mount_nfs_shares",
          "create_matching_uid_user",
          "extract_ssh_private_keys"
        ]
      }
    ],
    "escalation_keys": [
      {
        "privilege_level": "command_injection",
        "escalation_method": "certificate_extraction_to_https_access",
        "why_possible": "Client certificates stored in accessible filesystem location",
        "recognition_signs": [
          "certificate_files_in_web_directory",
          "https_service_requires_client_auth",
          "filesystem_enumeration_possible"
        ],
        "exploitation_path": "Command Injection → File System Access → Certificate Extraction → HTTPS Access"
      },
      {
        "privilege_level": "https_access",
        "escalation_method": "ssh_key_to_authpf_access",
        "why_possible": "Authenticated HTTPS service provided SSH credentials",
        "recognition_signs": [
          "authenticated_service_provides_credentials",
          "ssh_key_for_specific_user",
          "authpf_service_configured"
        ],
        "exploitation_path": "HTTPS Access → SSH Key Download → AuthPF Connection → Firewall Bypass"
      },
      {
        "privilege_level": "authpf_access",
        "escalation_method": "nfs_uid_spoofing_to_user_access",
        "why_possible": "NFS service trusted client-provided UIDs without authentication",
        "recognition_signs": [
          "nfs_ports_accessible_after_authpf",
          "home_directories_exported",
          "no_uid_mapping_or_authentication"
        ],
        "exploitation_path": "AuthPF Access → NFS Discovery → UID Spoofing → SSH Key Access → User Shell"
      }
    ]
  },
  "decision_tree": {
    "decision_points": [
      {
        "step": 1,
        "situation": "Found ports 22,80,443 open on OpenBSD host",
        "decision": "Enumerate web services first, especially unusual HTTPS behavior",
        "reasoning": "Port 443 shows client cert requirement, port 80 may reveal key material",
        "confidence": 0.9,
        "alternatives": [
          {
            "option": "ssh_enumeration",
            "when": "if web services fail"
          },
          {
            "option": "ssl_certificate_analysis",
            "when": "if client cert hints found"
          }
        ],
        "success_indicators": [
          "web_application_found",
          "command_injection_possible",
          "certificate_material_discovered"
        ],
        "next_decision": "test_for_command_injection"
      },
      {
        "step": 2,
        "situation": "Web application with user input processing",
        "decision": "Test for command injection in fortune database parameter",
        "reasoning": "Application appears to call system fortune command with user input",
        "confidence": 0.85,
        "prerequisites": [
          "web_form_identified",
          "parameter_manipulation_possible"
        ],
        "success_indicators": [
          "command_execution_confirmed",
          "system_information_retrieved"
        ],
        "failure_fallbacks": [
          "sql_injection",
          "file_inclusion",
          "directory_traversal"
        ]
      },
      {
        "step": 3,
        "situation": "Command injection confirmed but reverse shell blocked",
        "decision": "Use command injection for file system enumeration to find certificates",
        "reasoning": "Outbound connections blocked, but file access available for cert discovery",
        "confidence": 0.8,
        "prerequisites": [
          "command_injection_working",
          "reverse_shell_failed"
        ],
        "success_indicators": [
          "certificate_files_found",
          "private_keys_discovered"
        ],
        "failure_fallbacks": [
          "local_privilege_escalation",
          "service_enumeration"
        ]
      },
      {
        "step": 4,
        "situation": "Found CA certificate and private key in user directory",
        "decision": "Create client certificate for HTTPS access",
        "reasoning": "Client cert authentication required, CA materials available",
        "confidence": 0.95,
        "prerequisites": [
          "ca_cert_found",
          "ca_private_key_found"
        ],
        "success_indicators": [
          "client_cert_created",
          "https_access_granted"
        ],
        "failure_fallbacks": [
          "certificate_extraction_from_other_sources"
        ]
      }
    ],
    "branching_logic": {
      "if_command_injection_succeeds": {
        "action": "enumerate_file_system_for_certificates",
        "tools": [
          "custom_shell_script",
          "curl",
          "command_injection"
        ],
        "next_phase": "certificate_creation_and_access"
      },
      "if_reverse_shell_blocked": {
        "action": "continue_with_command_injection_enumeration",
        "alternatives": [
          "file_system_exploration",
          "certificate_hunting"
        ],
        "decision_criteria": "based_on_ssl_client_cert_requirement"
      },
      "if_certificates_found": {
        "action": "create_client_certificate_and_access_https",
        "purpose": "gain_access_to_restricted_https_service",
        "tools": [
          "openssl",
          "ca_materials"
        ]
      }
    },
    "optimization_rules": [
      {
        "rule": "always_check_for_certificate_materials_when_client_certs_required",
        "reasoning": "client_cert_authentication_needs_ca_or_existing_certs",
        "applicability": "https_services_requiring_client_authentication"
      },
      {
        "rule": "use_command_injection_for_enumeration_when_reverse_shells_blocked",
        "reasoning": "firewall_may_block_outbound_but_allow_file_access",
        "applicability": "restricted_network_environments"
      },
      {
        "rule": "enumerate_user_directories_for_ca_materials_on_certificate_based_systems",
        "reasoning": "administrators_often_store_ca_materials_in_accessible_locations",
        "applicability": "systems_with_pki_infrastructure"
      }
    ]
  },
  "applicability_rules": {
    "technique_rules": [
      {
        "technique": "Command Injection",
        "mitre_id": "T1059.004",
        "required_services": [
          "http",
          "https"
        ],
        "required_ports": [
          80,
          443,
          8080,
          8443
        ],
        "os_requirements": [
          "unix",
          "linux",
          "openbsd"
        ],
        "environmental_prerequisites": [
          "web_application_present",
          "user_input_processed_by_system_commands",
          "insufficient_input_sanitization"
        ],
        "success_indicators": [
          "command_output_in_response",
          "system_command_execution_confirmed",
          "process_information_revealed"
        ],
        "incompatible_with": [
          "strict_input_validation",
          "command_parameterization",
          "sandboxed_execution"
        ],
        "confidence_boosters": [
          "unix_command_line_tools_referenced",
          "parameter_accepts_file_paths",
          "legacy_system_integration"
        ],
        "typical_success_rate": 0.65,
        "estimated_time": "10-30 minutes"
      },
      {
        "technique": "Client Certificate Authentication Bypass",
        "mitre_id": "T1552.004",
        "required_services": [
          "https"
        ],
        "required_ports": [
          443
        ],
        "os_requirements": [
          "any"
        ],
        "environmental_prerequisites": [
          "client_certificate_required",
          "certificate_files_accessible",
          "mutual_tls_authentication"
        ],
        "success_indicators": [
          "certificate_files_found",
          "private_key_accessible",
          "ca_chain_identified"
        ],
        "incompatible_with": [
          "hardware_security_modules",
          "certificate_pinning",
          "secure_key_storage"
        ],
        "confidence_boosters": [
          "certificate_files_in_web_directories",
          "default_certificate_locations",
          "development_certificates_present"
        ],
        "typical_success_rate": 0.45,
        "estimated_time": "15-45 minutes"
      },
      {
        "technique": "NFS Share Enumeration",
        "mitre_id": "T1135",
        "required_services": [
          "nfs",
          "rpcbind"
        ],
        "required_ports": [
          111,
          2049
        ],
        "os_requirements": [
          "unix",
          "linux"
        ],
        "environmental_prerequisites": [
          "nfs_service_running",
          "network_file_shares_exported",
          "rpc_services_accessible"
        ],
        "success_indicators": [
          "showmount_returns_exports",
          "mount_successful",
          "file_system_access_granted"
        ],
        "incompatible_with": [
          "nfs_disabled",
          "strict_export_restrictions",
          "network_segmentation"
        ],
        "confidence_boosters": [
          "home_directories_exported",
          "weak_export_permissions",
          "uid_spoofing_possible"
        ],
        "typical_success_rate": 0.72,
        "estimated_time": "5-20 minutes"
      },
      {
        "technique": "AuthPF Firewall Manipulation",
        "mitre_id": "T1562.004",
        "required_services": [
          "ssh"
        ],
        "required_ports": [
          22
        ],
        "os_requirements": [
          "openbsd"
        ],
        "environmental_prerequisites": [
          "authpf_configured",
          "ssh_access_available",
          "firewall_rules_dynamic"
        ],
        "success_indicators": [
          "ssh_connection_established",
          "new_ports_accessible",
          "firewall_rules_modified"
        ],
        "incompatible_with": [
          "static_firewall_rules",
          "authpf_disabled",
          "ssh_access_restricted"
        ],
        "confidence_boosters": [
          "openbsd_system_detected",
          "authpf_user_accounts_present",
          "dynamic_port_opening_observed"
        ],
        "typical_success_rate": 0.35,
        "estimated_time": "20-60 minutes"
      }
    ],
    "environmental_detectors": {
      "openbsd_system": {
        "port_indicators": [
          22,
          80,
          443
        ],
        "service_indicators": [
          "ssh",
          "httpd"
        ],
        "banner_indicators": [
          "OpenBSD",
          "OpenSSH"
        ],
        "confidence_threshold": 0.8
      },
      "web_application": {
        "port_indicators": [
          80,
          443,
          8080,
          8443
        ],
        "service_indicators": [
          "http",
          "https",
          "httpd"
        ],
        "technology_indicators": [
          "apache",
          "nginx",
          "httpd"
        ],
        "confidence_threshold": 0.9
      },
      "nfs_environment": {
        "port_indicators": [
          111,
          2049
        ],
        "service_indicators": [
          "rpcbind",
          "nfs"
        ],
        "banner_indicators": [
          "portmapper",
          "nfs"
        ],
        "confidence_threshold": 0.85
      },
      "mutual_tls": {
        "port_indicators": [
          443
        ],
        "service_indicators": [
          "https"
        ],
        "banner_indicators": [
          "client authentication",
          "certificate required"
        ],
        "confidence_threshold": 0.75
      }
    },
    "attack_prioritization": {
      "high_priority": [
        {
          "attack": "command_injection",
          "when": "web_application_detected",
          "reason": "direct_system_access_possible"
        },
        {
          "attack": "nfs_enumeration",
          "when": "nfs_service_detected",
          "reason": "often_provides_file_system_access"
        }
      ],
      "medium_priority": [
        {
          "attack": "certificate_extraction",
          "when": "mutual_tls_detected",
          "reason": "enables_access_to_protected_resources"
        },
        {
          "attack": "authpf_exploitation",
          "when": "openbsd_system_detected",
          "reason": "unique_firewall_bypass_opportunity"
        }
      ]
    }
  },
  "technique_intelligence": {
    "techniques": [
      {
        "name": "Command Injection via Web Parameter",
        "mitre_id": "T1059.004",
        "category": "execution",
        "phase": "initial_access",
        "tools_used": [
          {
            "name": "curl",
            "command_template": "curl -s -X POST http://{target}/select -d \"db={payload}\"",
            "actual_command": "curl -s -X POST http://10.10.10.127/select -d \"db=;id\"",
            "output_pattern": "uid=512(_fortune) gid=512(_fortune) groups=512(_fortune)",
            "effectiveness_rating": 5,
            "reliability": 0.95
          },
          {
            "name": "Custom Python Shell",
            "command_template": "requests.post(url, data={\"db\": f\"s;{command} 2>&1\"})",
            "actual_command": "Terminal().default(\"id\")",
            "success_factors": [
              "command_injection_vulnerability",
              "error_output_displayed"
            ],
            "effectiveness_rating": 4
          }
        ],
        "prerequisites": [
          "web_application_with_command_execution",
          "user_input_passed_to_system_calls",
          "error_output_displayed_to_user"
        ],
        "success_indicators": [
          "system_commands_execute_successfully",
          "command_output_returned_in_response",
          "file_system_enumeration_possible"
        ],
        "common_failures": [
          "outbound_connections_blocked",
          "reverse_shell_attempts_fail",
          "command_filtering_in_place"
        ],
        "follow_up_techniques": [
          "file_system_enumeration",
          "credential_harvesting",
          "certificate_extraction"
        ],
        "time_investment": "10-20 minutes",
        "skill_level": "beginner"
      },
      {
        "name": "Client Certificate Generation and Authentication",
        "mitre_id": "T1649",
        "category": "credential_access",
        "phase": "lateral_movement",
        "tools_used": [
          {
            "name": "openssl genrsa",
            "command_template": "openssl genrsa -out {keyname}.key 2048",
            "actual_command": "openssl genrsa -out 0xdf.key 2048",
            "output_pattern": "Generating RSA private key",
            "effectiveness_rating": 5,
            "reliability": 0.99
          },
          {
            "name": "openssl req",
            "command_template": "openssl req -new -key {keyname}.key -out {keyname}.csr",
            "actual_command": "openssl req -new -key 0xdf.key -out 0xdf.csr",
            "success_factors": [
              "valid_certificate_authority_available"
            ],
            "effectiveness_rating": 5
          },
          {
            "name": "openssl x509",
            "command_template": "openssl x509 -req -in {csr} -CA {ca_cert} -CAkey {ca_key} -CAcreateserial -out {cert}.pem -days {days}",
            "actual_command": "openssl x509 -req -in 0xdf.csr -CA intermediate.cert.pem -CAkey intermediate.key.pem -CAcreateserial -out 0xdf.pem -days 1024",
            "success_factors": [
              "ca_private_key_accessible",
              "ca_certificate_available"
            ],
            "effectiveness_rating": 5
          },
          {
            "name": "openssl pkcs12",
            "command_template": "openssl pkcs12 -export -out {cert}.pfx -inkey {key} -in {cert}.pem -certfile {ca_cert}",
            "actual_command": "openssl pkcs12 -export -out 0xdf.pfx -inkey 0xdf.key -in 0xdf.pem -certfile intermediate.cert.pem",
            "success_factors": [
              "browser_import_required"
            ],
            "effectiveness_rating": 4
          }
        ],
        "prerequisites": [
          "certificate_authority_private_key_compromised",
          "ca_certificate_available",
          "target_service_requires_client_certificates"
        ],
        "success_indicators": [
          "client_certificate_generated_successfully",
          "certificate_accepted_by_target_service",
          "access_granted_to_protected_resources"
        ],
        "common_failures": [
          "ca_key_not_accessible",
          "certificate_validation_errors",
          "browser_import_issues"
        ],
        "follow_up_techniques": [
          "authenticated_resource_enumeration",
          "ssh_key_generation",
          "authpf_exploitation"
        ],
        "time_investment": "15-30 minutes",
        "skill_level": "intermediate"
      },
      {
        "name": "SSL/TLS Service Enumeration",
        "mitre_id": "T1046",
        "category": "discovery",
        "phase": "reconnaissance",
        "tools_used": [
          {
            "name": "sslyze",
            "command_template": "sslyze --regular {target}",
            "actual_command": "sslyze --regular 10.10.10.127",
            "output_pattern": "Server REQUIRED client authentication",
            "effectiveness_rating": 4,
            "reliability": 0.9
          },
          {
            "name": "nmap ssl-enum-ciphers",
            "command_template": "nmap --script ssl-enum-ciphers -p {port} {target}",
            "actual_command": "nmap --script ssl-enum-ciphers -p 443 10.10.10.127",
            "success_factors": [
              "ssl_service_responsive"
            ],
            "effectiveness_rating": 4
          }
        ],
        "prerequisites": [
          "ssl_tls_service_accessible",
          "target_port_open"
        ],
        "success_indicators": [
          "certificate_information_extracted",
          "client_authentication_requirements_identified",
          "ca_information_discovered"
        ],
        "common_failures": [
          "service_not_responsive",
          "certificate_parsing_errors"
        ],
        "follow_up_techniques": [
          "certificate_authority_compromise",
          "client_certificate_generation"
        ],
        "time_investment": "5-10 minutes",
        "skill_level": "beginner"
      }
    ],
    "tool_effectiveness": [
      {
        "tool": "sslyze",
        "use_case": "ssl_tls_service_analysis",
        "effectiveness_rating": 4,
        "reliability": 0.9,
        "learning_curve": "low",
        "essential_for": [
          "ssl_certificate_analysis",
          "client_auth_detection"
        ],
        "alternatives": [
          "openssl s_client",
          "nmap ssl scripts"
        ],
        "best_practices": [
          "use_regular_scan_for_comprehensive_analysis",
          "focus_on_certificate_details_and_client_auth_requirements",
          "combine_with_manual_certificate_extraction"
        ]
      },
      {
        "tool": "openssl",
        "use_case": "certificate_generation_and_manipulation",
        "effectiveness_rating": 5,
        "reliability": 0.99,
        "learning_curve": "medium",
        "essential_for": [
          "client_certificate_creation",
          "ca_operations"
        ],
        "alternatives": [
          "certtool",
          "keytool"
        ],
        "best_practices": [
          "always_verify_certificate_chain",
          "use_appropriate_key_sizes_2048_minimum",
          "test_certificates_before_deployment"
        ]
      }
    ],
    "command_sequences": [
      {
        "sequence_name": "command_injection_to_file_access",
        "steps": [
          {
            "step": 1,
            "command": "curl -s -X POST http://10.10.10.127/select -d \"db=;id\"",
            "purpose": "Test command injection vulnerability",
            "expected_output": "uid=512(_fortune) gid=512(_fortune) groups=512(_fortune)"
          },
          {
            "step": 2,
            "command": "curl -s -X POST http://10.10.10.127/select -d \"db=;ls /home\"",
            "purpose": "Enumerate user directories",
            "expected_output": "bob charlie nfsuser"
          },
          {
            "step": 3,
            "command": "curl -s -X POST http://10.10.10.127/select -d \"db=;find /home/bob -name '*.pem' -o -name '*.key'\"",
            "purpose": "Locate certificate materials",
            "expected_output": "Certificate and key file paths"
          }
        ],
        "success_rate": 0.95,
        "typical_duration": "10-15 minutes"
      },
      {
        "sequence_name": "client_certificate_creation_workflow",
        "steps": [
          {
            "step": 1,
            "command": "openssl genrsa -out client.key 2048",
            "purpose": "Generate client private key",
            "expected_output": "Generating RSA private key, 2048 bit long modulus"
          },
          {
            "step": 2,
            "command": "openssl req -new -key client.key -out client.csr",
            "purpose": "Create certificate signing request",
            "expected_output": "Interactive prompts for certificate details"
          },
          {
            "step": 3,
            "command": "openssl x509 -req -in client.csr -CA ca.cert.pem -CAkey ca.key.pem -CAcreateserial -out client.pem -days 365",
            "purpose": "Sign certificate with compromised CA",
            "expected_output": "Signature ok"
          },
          {
            "step": 4,
            "command": "curl -k --cert client.pem --key client.key https://target/",
            "purpose": "Test client certificate authentication",
            "expected_output": "Authenticated access to protected resource"
          }
        ],
        "success_rate": 0.87,
        "typical_duration": "20-30 minutes"
      }
    ]
  },
  "metadata": {
    "basic_metadata": {
      "name": "Fortune",
      "difficulty": "Insane",
      "os": "OpenBSD",
      "platform": "HackTheBox",
      "release_date": "2019-03-09",
      "author": "AuxSarge",
      "estimated_time": "4-6 hours"
    },
    "intelligence_metadata": {
      "attack_complexity": "high",
      "skill_level_required": "advanced",
      "primary_attack_vectors": [
        "command_injection",
        "nfs_exploitation",
        "authpf_bypass"
      ],
      "key_vulnerabilities": [
        "command_injection",
        "nfs_uid_spoofing",
        "credential_exposure"
      ],
      "environment_type": "openbsd_firewall_system",
      "real_world_relevance": "high",
      "learning_value": [
        "openbsd_exploitation",
        "nfs_attacks",
        "firewall_bypass",
        "authpf_mechanisms"
      ],
      "prerequisite_knowledge": [
        "unix_systems",
        "nfs_concepts",
        "certificate_handling",
        "firewall_concepts"
      ]
    },
    "categorization": {
      "primary_category": "network_services",
      "subcategories": [
        "command_injection",
        "nfs_exploitation",
        "firewall_bypass"
      ],
      "attack_types": [
        "initial_access",
        "privilege_escalation",
        "credential_access"
      ],
      "defensive_lessons": [
        "input_validation",
        "nfs_security",
        "firewall_configuration",
        "credential_storage"
      ]
    },
    "similarity_markers": {
      "similar_boxes": [
        "Chaos",
        "Networked",
        "Haystack"
      ],
      "similarity_reasons": [
        "complex_attack_chain",
        "network_service_exploitation",
        "unique_os_features"
      ],
      "unique_aspects": [
        "authpf_exploitation",
        "openbsd_specific",
        "nfs_uid_spoofing",
        "pgadmin_credential_extraction"
      ],
      "difficulty_factors": [
        "multiple_attack_vectors",
        "openbsd_specifics",
        "complex_firewall_bypass",
        "advanced_nfs_exploitation"
      ]
    }
  },
  "extraction_metadata": {
    "parse_date": "2025-07-04T16:37:16.751621",
    "original_file": "0xdf_writeups/Htb Fortune.md",
    "content_length": 36373,
    "extraction_version": "2.0-claude",
    "model_used": "claude-sonnet-4-20250514"
  },
  "intelligence_confidence": 1.0,
  "quality_breakdown": {
    "scenario_uniqueness": 1.0,
    "success_logic_clarity": 1.0,
    "applicability_completeness": 1.0,
    "decision_tree_depth": 1.0,
    "technique_actionability": 1.0
  }
}