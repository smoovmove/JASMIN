{
  "writeup_id": "Htb_Steamcloud",
  "scenario_fingerprint": {
    "scenario_name": "kubernetes_kubelet_privilege_escalation",
    "primary_services": [
      "kubernetes",
      "etcd",
      "kubelet",
      "ssh"
    ],
    "port_signature": "22+2379+2380+8443+10249+10250+10256",
    "service_combination": "ssh+etcd+kubernetes_api+kubelet",
    "os_family": "linux",
    "environment_type": "kubernetes_cluster",
    "entry_vector": "kubelet_api_access",
    "privilege_path": "kubelet_to_pod_access_to_host_mount",
    "attack_complexity": "easy",
    "estimated_time": "30-45 minutes",
    "scenario_confidence": 0.92,
    "distinguishing_factors": [
      "minikube_deployment",
      "kubelet_unauthenticated_access",
      "pod_host_filesystem_mount",
      "kubernetes_api_without_auth"
    ],
    "environmental_clues": [
      "minikube_ssl_certificate",
      "kubernetes_default_service_names",
      "golang_http_servers",
      "etcd_client_server_ports"
    ],
    "similar_scenarios": [
      "unobtainium_htb",
      "kubernetes_misconfig"
    ],
    "unique_aspects": [
      "all_k8s_components_single_host",
      "steamcloud_hostname",
      "minikube_specific_setup"
    ]
  },
  "success_patterns": {
    "success_factors": [
      {
        "technique": "Kubelet API Exploitation",
        "success_reason": "Kubelet API on port 10250 was accessible without authentication",
        "prerequisite_indicators": [
          "kubelet_port_10250_open",
          "kubernetes_cluster_accessible",
          "no_authentication_required"
        ],
        "recognition_patterns": [
          "port 10250 open in nmap scan",
          "kubeletctl pods command succeeds",
          "SSL cert shows kubernetes-related names",
          "minikube deployment indicators"
        ],
        "failure_modes": [
          "kubelet_authentication_enabled",
          "port_10250_filtered",
          "rbac_properly_configured"
        ],
        "environmental_factors": [
          "minikube_default_configuration",
          "development_environment_setup",
          "insufficient_kubernetes_hardening"
        ],
        "success_probability": 0.75,
        "typical_timeframe": "10-20 minutes"
      },
      {
        "technique": "Container Escape via Host Mount",
        "success_reason": "Ability to create privileged pods with host filesystem mounted",
        "prerequisite_indicators": [
          "kubernetes_api_access_obtained",
          "service_account_tokens_available",
          "cluster_admin_permissions"
        ],
        "recognition_patterns": [
          "kubectl commands execute successfully",
          "can create pods in cluster",
          "hostPath volume mounts allowed",
          "privileged containers permitted"
        ],
        "failure_modes": [
          "pod_security_policies_enforced",
          "rbac_restricts_pod_creation",
          "admission_controllers_block_privileged"
        ],
        "environmental_factors": [
          "default_kubernetes_permissions",
          "no_pod_security_standards",
          "development_cluster_configuration"
        ],
        "success_probability": 0.85,
        "typical_timeframe": "5-10 minutes"
      }
    ],
    "critical_discoveries": [
      {
        "discovery": "Unauthenticated Kubelet API access",
        "discovery_method": "kubeletctl pods enumeration",
        "why_critical": "Provides access to running containers and service account tokens",
        "how_to_recognize": [
          "port 10250 responds to kubeletctl",
          "pods listing returns without auth",
          "kubernetes certificate in nmap scan"
        ],
        "follow_up_actions": [
          "enumerate_all_pods",
          "extract_service_account_tokens",
          "test_kubernetes_api_access"
        ]
      },
      {
        "discovery": "Service account tokens in containers",
        "discovery_method": "Container filesystem access via kubelet",
        "why_critical": "Tokens provide authenticated access to Kubernetes API",
        "how_to_recognize": [
          "tokens in /var/run/secrets/kubernetes.io/serviceaccount/",
          "kubeletctl exec or run commands work",
          "container has mounted service account"
        ],
        "follow_up_actions": [
          "extract_token_and_ca_cert",
          "test_kubectl_with_token",
          "enumerate_rbac_permissions"
        ]
      }
    ],
    "escalation_keys": [
      {
        "privilege_level": "kubelet_access",
        "escalation_method": "Service_Account_Token_Extraction",
        "why_possible": "Kubelet API allows access to container filesystems containing mounted tokens",
        "recognition_signs": [
          "kubeletctl_commands_succeed",
          "containers_have_default_service_accounts",
          "tokens_mounted_in_standard_location"
        ],
        "exploitation_path": "Kubelet Access → Container Access → Token Extraction → K8s API Auth"
      },
      {
        "privilege_level": "kubernetes_api_access",
        "escalation_method": "Privileged_Pod_Creation",
        "why_possible": "Service account has permissions to create pods with host filesystem access",
        "recognition_signs": [
          "kubectl_create_pod_succeeds",
          "hostpath_volumes_allowed",
          "privileged_containers_permitted"
        ],
        "exploitation_path": "K8s API Access → Create Privileged Pod → Mount Host FS → Root Access"
      }
    ]
  },
  "decision_tree": {
    "decision_points": [
      {
        "step": 1,
        "situation": "Found Kubernetes ports 2379,2380,8443,10249,10250,10256 open on Linux host",
        "decision": "Identify as Kubernetes cluster and try Kubelet API before Kubernetes API",
        "reasoning": "Kubelet API (10250) often has weaker authentication than main API server (8443)",
        "confidence": 0.9,
        "alternatives": [
          {
            "option": "kubernetes_api_enumeration",
            "when": "if kubelet access fails"
          },
          {
            "option": "etcd_enumeration",
            "when": "if both APIs fail"
          }
        ],
        "success_indicators": [
          "kubelet_responds_to_pods_command",
          "pod_list_retrieved",
          "container_access_possible"
        ],
        "next_decision": "choose_target_pod_for_access"
      },
      {
        "step": 2,
        "situation": "Kubelet API accessible and pods enumerated",
        "decision": "Target non-system namespace pods first, then kube-system pods",
        "reasoning": "Non-system pods likely have fewer security restrictions",
        "confidence": 0.85,
        "prerequisites": [
          "kubelet_access_confirmed",
          "pod_list_obtained"
        ],
        "success_indicators": [
          "exec_access_to_pod_container"
        ],
        "failure_fallbacks": [
          "target_kube_system_pods",
          "look_for_service_account_tokens"
        ]
      },
      {
        "step": 3,
        "situation": "Container access obtained in pod",
        "decision": "Extract service account tokens and certificates for API access",
        "reasoning": "Service account tokens provide authentication to Kubernetes API",
        "confidence": 0.95,
        "prerequisites": [
          "container_shell_access"
        ],
        "success_indicators": [
          "service_account_token_found",
          "ca_cert_found"
        ],
        "next_decision": "authenticate_to_kubernetes_api"
      }
    ],
    "branching_logic": {
      "if_kubelet_accessible": {
        "action": "enumerate_pods_and_containers",
        "tools": [
          "kubeletctl"
        ],
        "next_phase": "container_access_attempt"
      },
      "if_kubelet_fails": {
        "action": "try_kubernetes_api_enumeration",
        "alternatives": [
          "anonymous_access_check",
          "etcd_direct_access"
        ],
        "decision_criteria": "based_on_error_response_type"
      },
      "if_container_access_obtained": {
        "action": "extract_service_account_credentials",
        "purpose": "authenticate_to_kubernetes_api",
        "tools": [
          "kubectl",
          "kubeletctl_exec"
        ]
      },
      "if_api_access_obtained": {
        "action": "create_privileged_pod_with_host_mount",
        "purpose": "escalate_to_host_system_access",
        "tools": [
          "kubectl_create_pod"
        ]
      }
    },
    "optimization_rules": [
      {
        "rule": "always_try_kubelet_before_kubernetes_api",
        "reasoning": "kubelet_often_has_weaker_authentication_controls",
        "applicability": "kubernetes_environments"
      },
      {
        "rule": "target_default_namespace_pods_first",
        "reasoning": "less_security_restrictions_than_kube_system",
        "applicability": "when_multiple_pods_available"
      },
      {
        "rule": "extract_service_account_tokens_immediately_after_container_access",
        "reasoning": "essential_for_kubernetes_api_authentication",
        "applicability": "any_kubernetes_pod_access"
      },
      {
        "rule": "create_privileged_pod_with_host_filesystem_mount_for_privilege_escalation",
        "reasoning": "standard_kubernetes_privilege_escalation_technique",
        "applicability": "when_kubernetes_api_access_obtained"
      }
    ]
  },
  "applicability_rules": {
    "technique_rules": [
      {
        "technique": "Kubelet API Exploitation",
        "mitre_id": "T1552.007",
        "required_services": [
          "kubelet"
        ],
        "required_ports": [
          10250
        ],
        "os_requirements": [
          "linux"
        ],
        "environmental_prerequisites": [
          "kubernetes_cluster_present",
          "kubelet_api_accessible",
          "anonymous_access_enabled"
        ],
        "success_indicators": [
          "pods_enumerable_via_kubelet",
          "container_exec_possible",
          "service_account_tokens_accessible"
        ],
        "incompatible_with": [
          "kubelet_authentication_required",
          "network_policies_blocking_access",
          "rbac_properly_configured"
        ],
        "confidence_boosters": [
          "minikube_deployment",
          "default_kubelet_configuration",
          "development_environment"
        ],
        "typical_success_rate": 0.75,
        "estimated_time": "10-30 minutes"
      },
      {
        "technique": "Kubernetes Privilege Escalation",
        "mitre_id": "T1611",
        "required_services": [
          "kubernetes-api"
        ],
        "required_ports": [
          8443,
          6443
        ],
        "os_requirements": [
          "linux"
        ],
        "environmental_prerequisites": [
          "kubernetes_api_server_accessible",
          "service_account_credentials_obtained",
          "pod_creation_permissions"
        ],
        "success_indicators": [
          "privileged_pod_creation_successful",
          "host_filesystem_mountable",
          "container_escape_achieved"
        ],
        "incompatible_with": [
          "pod_security_policies_enforced",
          "admission_controllers_blocking",
          "namespace_isolation_strict"
        ],
        "confidence_boosters": [
          "cluster_admin_service_account",
          "permissive_rbac_policies",
          "hostpath_volumes_allowed"
        ],
        "typical_success_rate": 0.85,
        "estimated_time": "15-45 minutes"
      }
    ],
    "environmental_detectors": {
      "kubernetes_cluster": {
        "port_indicators": [
          2379,
          2380,
          6443,
          8443,
          10250,
          10255,
          10256
        ],
        "service_indicators": [
          "etcd-client",
          "etcd-server",
          "kubelet",
          "kube-proxy"
        ],
        "banner_indicators": [
          "kubernetes",
          "minikube",
          "k8s"
        ],
        "certificate_indicators": [
          "kubernetes.default",
          "minikube",
          "system:masters"
        ],
        "confidence_threshold": 0.9
      },
      "minikube_environment": {
        "port_indicators": [
          8443,
          10250
        ],
        "certificate_indicators": [
          "minikube",
          "control-plane.minikube.internal"
        ],
        "service_indicators": [
          "minikube"
        ],
        "confidence_threshold": 0.95
      },
      "container_orchestration": {
        "port_indicators": [
          2375,
          2376,
          2377,
          8080,
          10250
        ],
        "service_indicators": [
          "docker",
          "containerd",
          "kubelet"
        ],
        "banner_indicators": [
          "Docker",
          "containerd",
          "Kubernetes"
        ],
        "confidence_threshold": 0.8
      }
    },
    "attack_prioritization": {
      "high_priority": [
        {
          "attack": "kubelet_anonymous_access",
          "when": "kubelet_port_10250_detected",
          "reason": "often_allows_pod_enumeration_and_exec"
        },
        {
          "attack": "kubernetes_service_account_extraction",
          "when": "container_access_achieved",
          "reason": "provides_api_server_authentication"
        }
      ],
      "medium_priority": [
        {
          "attack": "kubernetes_api_enumeration",
          "when": "kubernetes_api_detected_with_creds",
          "reason": "reveals_cluster_configuration_and_permissions"
        },
        {
          "attack": "privileged_pod_creation",
          "when": "kubernetes_api_access_with_permissions",
          "reason": "enables_container_escape_to_host"
        }
      ],
      "low_priority": [
        {
          "attack": "etcd_direct_access",
          "when": "etcd_ports_accessible",
          "reason": "usually_requires_authentication_certificates"
        }
      ]
    }
  },
  "technique_intelligence": {
    "techniques": [
      {
        "name": "Kubelet API Exploitation",
        "mitre_id": "T1552.007",
        "category": "credential_access",
        "phase": "initial_access",
        "tools_used": [
          {
            "name": "kubeletctl",
            "command_template": "kubeletctl pods -s {target_ip}",
            "actual_command": "kubeletctl pods -s 10.10.11.133",
            "output_pattern": "Pod listing with namespaces and containers",
            "effectiveness_rating": 5,
            "reliability": 0.95
          },
          {
            "name": "kubeletctl",
            "command_template": "kubeletctl -s {target_ip} exec \"{command}\" -p {pod_name} -c {container_name}",
            "actual_command": "kubeletctl -s 10.10.11.133 exec \"id\" -p nginx -c nginx",
            "success_factors": [
              "kubelet_api_accessible",
              "unauthenticated_access"
            ],
            "effectiveness_rating": 5
          }
        ],
        "prerequisites": [
          "kubelet_port_10250_accessible",
          "no_authentication_required",
          "running_pods_present"
        ],
        "success_indicators": [
          "pod_enumeration_successful",
          "command_execution_in_container",
          "root_access_in_container"
        ],
        "common_failures": [
          "authentication_required",
          "network_connectivity_issues",
          "no_running_pods"
        ],
        "follow_up_techniques": [
          "kubernetes_api_credential_extraction",
          "container_escape",
          "privilege_escalation"
        ],
        "time_investment": "5-15 minutes",
        "skill_level": "intermediate"
      },
      {
        "name": "Kubernetes Service Discovery",
        "mitre_id": "T1046",
        "category": "discovery",
        "phase": "reconnaissance",
        "tools_used": [
          {
            "name": "nmap",
            "command_template": "nmap -p- --min-rate 10000 {target_ip}",
            "actual_command": "nmap -p- --min-rate 10000 10.10.11.133",
            "output_pattern": "Kubernetes ports: 2379, 2380, 8443, 10249, 10250, 10256",
            "effectiveness_rating": 5,
            "reliability": 0.98
          },
          {
            "name": "nmap",
            "command_template": "nmap -p {ports} -sCV {target_ip}",
            "actual_command": "nmap -p 22,2379,2380,8443,10249,10250,10256 -sCV 10.10.11.133",
            "success_factors": [
              "ssl_certificate_analysis",
              "service_fingerprinting"
            ],
            "effectiveness_rating": 4
          }
        ],
        "prerequisites": [
          "network_connectivity",
          "target_host_responsive"
        ],
        "success_indicators": [
          "kubernetes_ports_identified",
          "minikube_environment_detected",
          "ssl_certificate_reveals_cluster_info"
        ],
        "common_failures": [
          "ports_filtered_by_firewall",
          "service_misidentification"
        ],
        "follow_up_techniques": [
          "kubernetes_api_enumeration",
          "kubelet_exploitation"
        ],
        "time_investment": "10-20 minutes",
        "skill_level": "beginner"
      },
      {
        "name": "Container Command Execution",
        "mitre_id": "T1609",
        "category": "execution",
        "phase": "execution",
        "tools_used": [
          {
            "name": "kubeletctl",
            "command_template": "kubeletctl -s {target_ip} exec \"/bin/bash\" -p {pod_name} -c {container_name}",
            "actual_command": "kubeletctl -s 10.10.11.133 exec \"/bin/bash\" -p nginx -c nginx",
            "output_pattern": "Interactive shell in container",
            "effectiveness_rating": 5,
            "reliability": 0.9
          },
          {
            "name": "kubeletctl",
            "command_template": "kubeletctl runningpods -s {target_ip} | jq -c '.items[].metadata | [.name, .namespace]'",
            "actual_command": "kubeletctl runningpods -s 10.10.11.133 | jq -c '.items[].metadata | [.name, .namespace]'",
            "success_factors": [
              "json_parsing_available",
              "pod_metadata_accessible"
            ],
            "effectiveness_rating": 4
          }
        ],
        "prerequisites": [
          "kubelet_access_established",
          "target_pod_identified",
          "container_name_known"
        ],
        "success_indicators": [
          "interactive_shell_obtained",
          "root_privileges_in_container",
          "file_system_access"
        ],
        "common_failures": [
          "shell_not_available_in_container",
          "command_execution_blocked",
          "container_security_restrictions"
        ],
        "follow_up_techniques": [
          "file_system_enumeration",
          "credential_harvesting",
          "lateral_movement"
        ],
        "time_investment": "2-10 minutes",
        "skill_level": "beginner"
      }
    ],
    "tool_effectiveness": [
      {
        "tool": "kubeletctl",
        "use_case": "kubernetes_node_exploitation",
        "effectiveness_rating": 5,
        "reliability": 0.95,
        "learning_curve": "low",
        "essential_for": [
          "kubernetes_environments"
        ],
        "alternatives": [
          "direct_api_calls",
          "kubectl_with_credentials"
        ],
        "best_practices": [
          "enumerate_pods_before_execution",
          "target_non_system_pods_first",
          "use_interactive_shells_when_possible"
        ]
      },
      {
        "tool": "nmap",
        "use_case": "kubernetes_service_discovery",
        "effectiveness_rating": 5,
        "reliability": 0.98,
        "learning_curve": "low",
        "essential_for": [
          "initial_reconnaissance"
        ],
        "alternatives": [
          "masscan",
          "rustscan"
        ],
        "best_practices": [
          "analyze_ssl_certificates_for_cluster_info",
          "identify_kubernetes_specific_ports",
          "correlate_service_versions_with_vulnerabilities"
        ]
      }
    ],
    "command_sequences": [
      {
        "sequence_name": "kubelet_to_container_shell",
        "steps": [
          {
            "step": 1,
            "command": "nmap -p- --min-rate 10000 10.10.11.133",
            "purpose": "Discover Kubernetes ports",
            "expected_output": "Ports 2379, 2380, 8443, 10249, 10250, 10256 open"
          },
          {
            "step": 2,
            "command": "kubeletctl pods -s 10.10.11.133",
            "purpose": "Enumerate running pods",
            "expected_output": "List of pods including nginx in default namespace"
          },
          {
            "step": 3,
            "command": "kubeletctl -s 10.10.11.133 exec \"id\" -p nginx -c nginx",
            "purpose": "Test command execution",
            "expected_output": "uid=0(root) gid=0(root) groups=0(root)"
          },
          {
            "step": 4,
            "command": "kubeletctl -s 10.10.11.133 exec \"/bin/bash\" -p nginx -c nginx",
            "purpose": "Obtain interactive shell",
            "expected_output": "Interactive bash shell as root"
          }
        ],
        "success_rate": 0.92,
        "typical_duration": "10-25 minutes"
      }
    ]
  },
  "metadata": {
    "basic_metadata": {
      "name": "SteamCloud",
      "difficulty": "Easy",
      "os": "Linux",
      "platform": "HackTheBox",
      "release_date": "2022-02-14",
      "author": "felamos",
      "estimated_time": "60-90 minutes"
    },
    "intelligence_metadata": {
      "attack_complexity": "medium",
      "skill_level_required": "intermediate",
      "primary_attack_vectors": [
        "kubernetes",
        "kubelet_api",
        "container_escape"
      ],
      "key_vulnerabilities": [
        "kubelet_unauthorized_access",
        "kubernetes_api_abuse",
        "container_privilege_escalation"
      ],
      "environment_type": "kubernetes_cluster",
      "real_world_relevance": "very_high",
      "learning_value": [
        "kubernetes_security",
        "container_orchestration_attacks",
        "cloud_native_exploitation"
      ],
      "prerequisite_knowledge": [
        "kubernetes_basics",
        "container_concepts",
        "api_authentication"
      ]
    },
    "categorization": {
      "primary_category": "cloud_native",
      "subcategories": [
        "kubernetes",
        "container_security",
        "orchestration"
      ],
      "attack_types": [
        "lateral_movement",
        "privilege_escalation",
        "credential_access"
      ],
      "defensive_lessons": [
        "secure_kubelet_config",
        "rbac_implementation",
        "pod_security_policies"
      ]
    },
    "similarity_markers": {
      "similar_boxes": [
        "Bucket",
        "Delivery",
        "Ophiuchi"
      ],
      "similarity_reasons": [
        "cloud_technologies",
        "api_exploitation",
        "container_environments"
      ],
      "unique_aspects": [
        "kubernetes_focus",
        "kubelet_exploitation",
        "minikube_environment"
      ],
      "difficulty_factors": [
        "kubernetes_knowledge_required",
        "multiple_api_interactions",
        "container_concepts"
      ]
    }
  },
  "extraction_metadata": {
    "parse_date": "2025-07-04T00:57:42.099057",
    "original_file": "0xdf_writeups/Htb Steamcloud.md",
    "content_length": 28693,
    "extraction_version": "2.0-claude",
    "model_used": "claude-sonnet-4-20250514"
  },
  "intelligence_confidence": 0.9166666666666667,
  "quality_breakdown": {
    "scenario_uniqueness": 1.0,
    "success_logic_clarity": 0.6666666666666666,
    "applicability_completeness": 1.0,
    "decision_tree_depth": 1.0,
    "technique_actionability": 1.0
  }
}